
// Generated by Akka gRPC. DO NOT EDIT.
package example.myapp.helloworld.grpc

import scala.concurrent.ExecutionContext

import io.grpc.ManagedChannel
import io.grpc.MethodDescriptor

import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.Marshaller
import akka.grpc.internal.NettyClientUtils
import akka.grpc.internal.ClientState

import akka.stream.Materializer

import akka.grpc.internal.ScalaUnaryRequestBuilder
import akka.grpc.scaladsl.StreamResponseRequestBuilder
import akka.grpc.internal.ScalaClientStreamingRequestBuilder
import akka.grpc.internal.ScalaServerStreamingRequestBuilder
import akka.grpc.internal.ScalaBidirectionalStreamingRequestBuilder
import akka.grpc.scaladsl.SingleResponseRequestBuilder

// Not sealed so users can extend to write their stubs
trait GreeterServiceClient extends GreeterService with GreeterServiceClientPowerApi with AkkaGrpcClient

object GreeterServiceClient {
  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext): GreeterServiceClient =
    new DefaultGreeterServiceClient(settings)
}

final class DefaultGreeterServiceClient(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext) extends GreeterServiceClient {
  import DefaultGreeterServiceClient._

  private val options = NettyClientUtils.callOptions(settings)
  private val clientState = new ClientState(settings)

  
    private def sayHelloRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(sayHelloDescriptor, channel, options, settings)
      
    }
  
    private def itKeepsTalkingRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        val fqName = "helloworld.GreeterService.ItKeepsTalking"
        
          new ScalaClientStreamingRequestBuilder(itKeepsTalkingDescriptor, fqName, channel, options, settings, mat)
        
      
    }
  
    private def itKeepsReplyingRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        val fqName = "helloworld.GreeterService.ItKeepsReplying"
        
          new ScalaServerStreamingRequestBuilder(itKeepsReplyingDescriptor, fqName, channel, options, settings)
        
      
    }
  
    private def streamHellosRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        val fqName = "helloworld.GreeterService.StreamHellos"
        
          new ScalaBidirectionalStreamingRequestBuilder(streamHellosDescriptor, fqName, channel, options, settings)
        
      
    }
  

  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer sayHello(example.myapp.helloworld.grpc.HelloRequest) if possible.
     */
    
      override def sayHello(): SingleResponseRequestBuilder[example.myapp.helloworld.grpc.HelloRequest, example.myapp.helloworld.grpc.HelloReply] =
        clientState.withChannel(sayHelloRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of sayHello
     */
    def sayHello(in: example.myapp.helloworld.grpc.HelloRequest): scala.concurrent.Future[example.myapp.helloworld.grpc.HelloReply] =
      sayHello().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer itKeepsTalking(akka.stream.scaladsl.Source[example.myapp.helloworld.grpc.HelloRequest, akka.NotUsed]) if possible.
     */
    
      override def itKeepsTalking(): SingleResponseRequestBuilder[akka.stream.scaladsl.Source[example.myapp.helloworld.grpc.HelloRequest, akka.NotUsed], example.myapp.helloworld.grpc.HelloReply] =
        clientState.withChannel(itKeepsTalkingRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of itKeepsTalking
     */
    def itKeepsTalking(in: akka.stream.scaladsl.Source[example.myapp.helloworld.grpc.HelloRequest, akka.NotUsed]): scala.concurrent.Future[example.myapp.helloworld.grpc.HelloReply] =
      itKeepsTalking().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer itKeepsReplying(example.myapp.helloworld.grpc.HelloRequest) if possible.
     */
    
      override def itKeepsReplying(): StreamResponseRequestBuilder[example.myapp.helloworld.grpc.HelloRequest, example.myapp.helloworld.grpc.HelloReply] =
        clientState.withChannel(itKeepsReplyingRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of itKeepsReplying
     */
    def itKeepsReplying(in: example.myapp.helloworld.grpc.HelloRequest): akka.stream.scaladsl.Source[example.myapp.helloworld.grpc.HelloReply, akka.NotUsed] =
      itKeepsReplying().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer streamHellos(akka.stream.scaladsl.Source[example.myapp.helloworld.grpc.HelloRequest, akka.NotUsed]) if possible.
     */
    
      override def streamHellos(): StreamResponseRequestBuilder[akka.stream.scaladsl.Source[example.myapp.helloworld.grpc.HelloRequest, akka.NotUsed], example.myapp.helloworld.grpc.HelloReply] =
        clientState.withChannel(streamHellosRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of streamHellos
     */
    def streamHellos(in: akka.stream.scaladsl.Source[example.myapp.helloworld.grpc.HelloRequest, akka.NotUsed]): akka.stream.scaladsl.Source[example.myapp.helloworld.grpc.HelloReply, akka.NotUsed] =
      streamHellos().invoke(in)
  

  override def close(): scala.concurrent.Future[akka.Done] = clientState.close()
  override def closed(): scala.concurrent.Future[akka.Done] = clientState.closed()

}



private object DefaultGreeterServiceClient {

  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext): GreeterServiceClient =
    new DefaultGreeterServiceClient(settings)

  import GreeterService.Serializers._

  
    private val sayHelloDescriptor: MethodDescriptor[example.myapp.helloworld.grpc.HelloRequest, example.myapp.helloworld.grpc.HelloReply] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("helloworld.GreeterService", "SayHello"))
        .setRequestMarshaller(new Marshaller(HelloRequestSerializer))
        .setResponseMarshaller(new Marshaller(HelloReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val itKeepsTalkingDescriptor: MethodDescriptor[example.myapp.helloworld.grpc.HelloRequest, example.myapp.helloworld.grpc.HelloReply] =
      MethodDescriptor.newBuilder()
        .setType(
  
  MethodDescriptor.MethodType.CLIENT_STREAMING 
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("helloworld.GreeterService", "ItKeepsTalking"))
        .setRequestMarshaller(new Marshaller(HelloRequestSerializer))
        .setResponseMarshaller(new Marshaller(HelloReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val itKeepsReplyingDescriptor: MethodDescriptor[example.myapp.helloworld.grpc.HelloRequest, example.myapp.helloworld.grpc.HelloReply] =
      MethodDescriptor.newBuilder()
        .setType(
  
  
   MethodDescriptor.MethodType.SERVER_STREAMING 
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("helloworld.GreeterService", "ItKeepsReplying"))
        .setRequestMarshaller(new Marshaller(HelloRequestSerializer))
        .setResponseMarshaller(new Marshaller(HelloReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val streamHellosDescriptor: MethodDescriptor[example.myapp.helloworld.grpc.HelloRequest, example.myapp.helloworld.grpc.HelloReply] =
      MethodDescriptor.newBuilder()
        .setType(
  
  
  
  MethodDescriptor.MethodType.BIDI_STREAMING 
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("helloworld.GreeterService", "StreamHellos"))
        .setRequestMarshaller(new Marshaller(HelloRequestSerializer))
        .setResponseMarshaller(new Marshaller(HelloReplySerializer))
        .setSampledToLocalTracing(true)
        .build()
  
}

trait GreeterServiceClientPowerApi {
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer sayHello(example.myapp.helloworld.grpc.HelloRequest) if possible.
     */
    
      def sayHello(): SingleResponseRequestBuilder[example.myapp.helloworld.grpc.HelloRequest, example.myapp.helloworld.grpc.HelloReply] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer itKeepsTalking(akka.stream.scaladsl.Source[example.myapp.helloworld.grpc.HelloRequest, akka.NotUsed]) if possible.
     */
    
      def itKeepsTalking(): SingleResponseRequestBuilder[akka.stream.scaladsl.Source[example.myapp.helloworld.grpc.HelloRequest, akka.NotUsed], example.myapp.helloworld.grpc.HelloReply] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer itKeepsReplying(example.myapp.helloworld.grpc.HelloRequest) if possible.
     */
    
      def itKeepsReplying(): StreamResponseRequestBuilder[example.myapp.helloworld.grpc.HelloRequest, example.myapp.helloworld.grpc.HelloReply] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer streamHellos(akka.stream.scaladsl.Source[example.myapp.helloworld.grpc.HelloRequest, akka.NotUsed]) if possible.
     */
    
      def streamHellos(): StreamResponseRequestBuilder[akka.stream.scaladsl.Source[example.myapp.helloworld.grpc.HelloRequest, akka.NotUsed], example.myapp.helloworld.grpc.HelloReply] = ???
    
  

}
