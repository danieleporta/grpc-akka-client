// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.`type`

/** An object representing a latitude/longitude pair. This is expressed as a pair
  * of doubles representing degrees latitude and degrees longitude. Unless
  * specified otherwise, this must conform to the
  * &lt;a href="http://www.unoosa.org/pdf/icg/2012/template/WGS_84.pdf"&gt;WGS84
  * standard&lt;/a&gt;. Values must be within normalized ranges.
  *
  * Example of normalization code in Python:
  *
  *     def NormalizeLongitude(longitude):
  *       """Wraps decimal degrees longitude to [-180.0, 180.0]."""
  *       q, r = divmod(longitude, 360.0)
  *       if r &gt; 180.0 or (r == 180.0 and q &lt;= -1.0):
  *         return r - 360.0
  *       return r
  *
  *     def NormalizeLatLng(latitude, longitude):
  *       """Wraps decimal degrees latitude and longitude to
  *       [-90.0, 90.0] and [-180.0, 180.0], respectively."""
  *       r = latitude % 360.0
  *       if r &lt;= 90.0:
  *         return r, NormalizeLongitude(longitude)
  *       elif r &gt;= 270.0:
  *         return r - 360, NormalizeLongitude(longitude)
  *       else:
  *         return 180 - r, NormalizeLongitude(longitude + 180.0)
  *
  *     assert 180.0 == NormalizeLongitude(180.0)
  *     assert -180.0 == NormalizeLongitude(-180.0)
  *     assert -179.0 == NormalizeLongitude(181.0)
  *     assert (0.0, 0.0) == NormalizeLatLng(360.0, 0.0)
  *     assert (0.0, 0.0) == NormalizeLatLng(-360.0, 0.0)
  *     assert (85.0, 180.0) == NormalizeLatLng(95.0, 0.0)
  *     assert (-85.0, -170.0) == NormalizeLatLng(-95.0, 10.0)
  *     assert (90.0, 10.0) == NormalizeLatLng(90.0, 10.0)
  *     assert (-90.0, -10.0) == NormalizeLatLng(-90.0, -10.0)
  *     assert (0.0, -170.0) == NormalizeLatLng(-180.0, 10.0)
  *     assert (0.0, -170.0) == NormalizeLatLng(180.0, 10.0)
  *     assert (-90.0, 10.0) == NormalizeLatLng(270.0, 10.0)
  *     assert (90.0, 10.0) == NormalizeLatLng(-270.0, 10.0)
  *
  * @param latitude
  *   The latitude in degrees. It must be in the range [-90.0, +90.0].
  * @param longitude
  *   The longitude in degrees. It must be in the range [-180.0, +180.0].
  */
@SerialVersionUID(0L)
final case class LatLng(
    latitude: _root_.scala.Double = 0.0,
    longitude: _root_.scala.Double = 0.0
    ) extends scalapb.GeneratedMessage with scalapb.Message[LatLng] with scalapb.lenses.Updatable[LatLng] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = latitude
        if (__value != 0.0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(1, __value)
        }
      };
      
      {
        val __value = longitude
        if (__value != 0.0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeDoubleSize(2, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = latitude
        if (__v != 0.0) {
          _output__.writeDouble(1, __v)
        }
      };
      {
        val __v = longitude
        if (__v != 0.0) {
          _output__.writeDouble(2, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.`type`.LatLng = {
      var __latitude = this.latitude
      var __longitude = this.longitude
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 9 =>
            __latitude = _input__.readDouble()
          case 17 =>
            __longitude = _input__.readDouble()
          case tag => _input__.skipField(tag)
        }
      }
      com.google.`type`.LatLng(
          latitude = __latitude,
          longitude = __longitude
      )
    }
    def withLatitude(__v: _root_.scala.Double): LatLng = copy(latitude = __v)
    def withLongitude(__v: _root_.scala.Double): LatLng = copy(longitude = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = latitude
          if (__t != 0.0) __t else null
        }
        case 2 => {
          val __t = longitude
          if (__t != 0.0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PDouble(latitude)
        case 2 => _root_.scalapb.descriptors.PDouble(longitude)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.`type`.LatLng
}

object LatLng extends scalapb.GeneratedMessageCompanion[com.google.`type`.LatLng] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.`type`.LatLng] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.`type`.LatLng = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.`type`.LatLng(
      __fieldsMap.getOrElse(__fields.get(0), 0.0).asInstanceOf[_root_.scala.Double],
      __fieldsMap.getOrElse(__fields.get(1), 0.0).asInstanceOf[_root_.scala.Double]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.`type`.LatLng] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.`type`.LatLng(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Double]).getOrElse(0.0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Double]).getOrElse(0.0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = LatlngProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = LatlngProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.`type`.LatLng(
    latitude = 0.0,
    longitude = 0.0
  )
  implicit class LatLngLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.`type`.LatLng]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.`type`.LatLng](_l) {
    def latitude: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.latitude)((c_, f_) => c_.copy(latitude = f_))
    def longitude: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Double] = field(_.longitude)((c_, f_) => c_.copy(longitude = f_))
  }
  final val LATITUDE_FIELD_NUMBER = 1
  final val LONGITUDE_FIELD_NUMBER = 2
  def of(
    latitude: _root_.scala.Double,
    longitude: _root_.scala.Double
  ): _root_.com.google.`type`.LatLng = _root_.com.google.`type`.LatLng(
    latitude,
    longitude
  )
}
