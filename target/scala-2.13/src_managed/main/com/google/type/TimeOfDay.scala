// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.`type`

/** Represents a time of day. The date and time zone are either not significant
  * or are specified elsewhere. An API may chose to allow leap seconds. Related
  * types are [google.type.Date][google.type.Date] and `google.protobuf.Timestamp`.
  *
  * @param hours
  *   Hours of day in 24 hour format. Should be from 0 to 23. An API may choose
  *   to allow the value "24:00:00" for scenarios like business closing time.
  * @param minutes
  *   Minutes of hour of day. Must be from 0 to 59.
  * @param seconds
  *   Seconds of minutes of the time. Must normally be from 0 to 59. An API may
  *   allow the value 60 if it allows leap-seconds.
  * @param nanos
  *   Fractions of seconds in nanoseconds. Must be from 0 to 999,999,999.
  */
@SerialVersionUID(0L)
final case class TimeOfDay(
    hours: _root_.scala.Int = 0,
    minutes: _root_.scala.Int = 0,
    seconds: _root_.scala.Int = 0,
    nanos: _root_.scala.Int = 0
    ) extends scalapb.GeneratedMessage with scalapb.Message[TimeOfDay] with scalapb.lenses.Updatable[TimeOfDay] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = hours
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(1, __value)
        }
      };
      
      {
        val __value = minutes
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        }
      };
      
      {
        val __value = seconds
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        }
      };
      
      {
        val __value = nanos
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(4, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = hours
        if (__v != 0) {
          _output__.writeInt32(1, __v)
        }
      };
      {
        val __v = minutes
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
      {
        val __v = seconds
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
      {
        val __v = nanos
        if (__v != 0) {
          _output__.writeInt32(4, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.`type`.TimeOfDay = {
      var __hours = this.hours
      var __minutes = this.minutes
      var __seconds = this.seconds
      var __nanos = this.nanos
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __hours = _input__.readInt32()
          case 16 =>
            __minutes = _input__.readInt32()
          case 24 =>
            __seconds = _input__.readInt32()
          case 32 =>
            __nanos = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      com.google.`type`.TimeOfDay(
          hours = __hours,
          minutes = __minutes,
          seconds = __seconds,
          nanos = __nanos
      )
    }
    def withHours(__v: _root_.scala.Int): TimeOfDay = copy(hours = __v)
    def withMinutes(__v: _root_.scala.Int): TimeOfDay = copy(minutes = __v)
    def withSeconds(__v: _root_.scala.Int): TimeOfDay = copy(seconds = __v)
    def withNanos(__v: _root_.scala.Int): TimeOfDay = copy(nanos = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = hours
          if (__t != 0) __t else null
        }
        case 2 => {
          val __t = minutes
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = seconds
          if (__t != 0) __t else null
        }
        case 4 => {
          val __t = nanos
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PInt(hours)
        case 2 => _root_.scalapb.descriptors.PInt(minutes)
        case 3 => _root_.scalapb.descriptors.PInt(seconds)
        case 4 => _root_.scalapb.descriptors.PInt(nanos)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.`type`.TimeOfDay
}

object TimeOfDay extends scalapb.GeneratedMessageCompanion[com.google.`type`.TimeOfDay] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.`type`.TimeOfDay] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.`type`.TimeOfDay = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.`type`.TimeOfDay(
      __fieldsMap.getOrElse(__fields.get(0), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(3), 0).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.`type`.TimeOfDay] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.`type`.TimeOfDay(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = TimeofdayProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = TimeofdayProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.`type`.TimeOfDay(
    hours = 0,
    minutes = 0,
    seconds = 0,
    nanos = 0
  )
  implicit class TimeOfDayLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.`type`.TimeOfDay]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.`type`.TimeOfDay](_l) {
    def hours: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.hours)((c_, f_) => c_.copy(hours = f_))
    def minutes: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.minutes)((c_, f_) => c_.copy(minutes = f_))
    def seconds: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.seconds)((c_, f_) => c_.copy(seconds = f_))
    def nanos: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.nanos)((c_, f_) => c_.copy(nanos = f_))
  }
  final val HOURS_FIELD_NUMBER = 1
  final val MINUTES_FIELD_NUMBER = 2
  final val SECONDS_FIELD_NUMBER = 3
  final val NANOS_FIELD_NUMBER = 4
  def of(
    hours: _root_.scala.Int,
    minutes: _root_.scala.Int,
    seconds: _root_.scala.Int,
    nanos: _root_.scala.Int
  ): _root_.com.google.`type`.TimeOfDay = _root_.com.google.`type`.TimeOfDay(
    hours,
    minutes,
    seconds,
    nanos
  )
}
