// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.`type`

/** Represents an amount of money with its currency type.
  *
  * @param currencyCode
  *   The 3-letter currency code defined in ISO 4217.
  * @param units
  *   The whole units of the amount.
  *   For example if `currencyCode` is `"USD"`, then 1 unit is one US dollar.
  * @param nanos
  *   Number of nano (10^-9) units of the amount.
  *   The value must be between -999,999,999 and +999,999,999 inclusive.
  *   If `units` is positive, `nanos` must be positive or zero.
  *   If `units` is zero, `nanos` can be positive, zero, or negative.
  *   If `units` is negative, `nanos` must be negative or zero.
  *   For example $-1.75 is represented as `units`=-1 and `nanos`=-750,000,000.
  */
@SerialVersionUID(0L)
final case class Money(
    currencyCode: _root_.scala.Predef.String = "",
    units: _root_.scala.Long = 0L,
    nanos: _root_.scala.Int = 0
    ) extends scalapb.GeneratedMessage with scalapb.Message[Money] with scalapb.lenses.Updatable[Money] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = currencyCode
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = units
        if (__value != 0L) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt64Size(2, __value)
        }
      };
      
      {
        val __value = nanos
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(3, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = currencyCode
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = units
        if (__v != 0L) {
          _output__.writeInt64(2, __v)
        }
      };
      {
        val __v = nanos
        if (__v != 0) {
          _output__.writeInt32(3, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.`type`.Money = {
      var __currencyCode = this.currencyCode
      var __units = this.units
      var __nanos = this.nanos
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __currencyCode = _input__.readString()
          case 16 =>
            __units = _input__.readInt64()
          case 24 =>
            __nanos = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      com.google.`type`.Money(
          currencyCode = __currencyCode,
          units = __units,
          nanos = __nanos
      )
    }
    def withCurrencyCode(__v: _root_.scala.Predef.String): Money = copy(currencyCode = __v)
    def withUnits(__v: _root_.scala.Long): Money = copy(units = __v)
    def withNanos(__v: _root_.scala.Int): Money = copy(nanos = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = currencyCode
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = units
          if (__t != 0L) __t else null
        }
        case 3 => {
          val __t = nanos
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(currencyCode)
        case 2 => _root_.scalapb.descriptors.PLong(units)
        case 3 => _root_.scalapb.descriptors.PInt(nanos)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.`type`.Money
}

object Money extends scalapb.GeneratedMessageCompanion[com.google.`type`.Money] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.`type`.Money] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.`type`.Money = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.`type`.Money(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), 0L).asInstanceOf[_root_.scala.Long],
      __fieldsMap.getOrElse(__fields.get(2), 0).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.`type`.Money] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.`type`.Money(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Long]).getOrElse(0L),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = MoneyProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = MoneyProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.`type`.Money(
    currencyCode = "",
    units = 0L,
    nanos = 0
  )
  implicit class MoneyLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.`type`.Money]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.`type`.Money](_l) {
    def currencyCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.currencyCode)((c_, f_) => c_.copy(currencyCode = f_))
    def units: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Long] = field(_.units)((c_, f_) => c_.copy(units = f_))
    def nanos: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.nanos)((c_, f_) => c_.copy(nanos = f_))
  }
  final val CURRENCY_CODE_FIELD_NUMBER = 1
  final val UNITS_FIELD_NUMBER = 2
  final val NANOS_FIELD_NUMBER = 3
  def of(
    currencyCode: _root_.scala.Predef.String,
    units: _root_.scala.Long,
    nanos: _root_.scala.Int
  ): _root_.com.google.`type`.Money = _root_.com.google.`type`.Money(
    currencyCode,
    units,
    nanos
  )
}
