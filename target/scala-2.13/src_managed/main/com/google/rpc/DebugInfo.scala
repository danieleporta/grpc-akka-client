// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.rpc

/** Describes additional debugging info.
  *
  * @param stackEntries
  *   The stack trace entries indicating where the error occurred.
  * @param detail
  *   Additional debugging information provided by the server.
  */
@SerialVersionUID(0L)
final case class DebugInfo(
    stackEntries: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty,
    detail: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[DebugInfo] with scalapb.lenses.Updatable[DebugInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      stackEntries.foreach { __item =>
        val __value = __item
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
      }
      
      {
        val __value = detail
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      stackEntries.foreach { __v =>
        val __m = __v
        _output__.writeString(1, __m)
      };
      {
        val __v = detail
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.rpc.DebugInfo = {
      val __stackEntries = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.stackEntries)
      var __detail = this.detail
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __stackEntries += _input__.readString()
          case 18 =>
            __detail = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      com.google.rpc.DebugInfo(
          stackEntries = __stackEntries.result(),
          detail = __detail
      )
    }
    def clearStackEntries = copy(stackEntries = _root_.scala.Seq.empty)
    def addStackEntries(__vs: _root_.scala.Predef.String*): DebugInfo = addAllStackEntries(__vs)
    def addAllStackEntries(__vs: Iterable[_root_.scala.Predef.String]): DebugInfo = copy(stackEntries = stackEntries ++ __vs)
    def withStackEntries(__v: _root_.scala.Seq[_root_.scala.Predef.String]): DebugInfo = copy(stackEntries = __v)
    def withDetail(__v: _root_.scala.Predef.String): DebugInfo = copy(detail = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => stackEntries
        case 2 => {
          val __t = detail
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(stackEntries.iterator.map(_root_.scalapb.descriptors.PString).toVector)
        case 2 => _root_.scalapb.descriptors.PString(detail)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.rpc.DebugInfo
}

object DebugInfo extends scalapb.GeneratedMessageCompanion[com.google.rpc.DebugInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.rpc.DebugInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.rpc.DebugInfo = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.rpc.DebugInfo(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.Seq[_root_.scala.Predef.String]],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.rpc.DebugInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.rpc.DebugInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ErrorDetailsProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ErrorDetailsProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.rpc.DebugInfo(
    stackEntries = _root_.scala.Seq.empty,
    detail = ""
  )
  implicit class DebugInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.rpc.DebugInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.rpc.DebugInfo](_l) {
    def stackEntries: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.stackEntries)((c_, f_) => c_.copy(stackEntries = f_))
    def detail: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.detail)((c_, f_) => c_.copy(detail = f_))
  }
  final val STACK_ENTRIES_FIELD_NUMBER = 1
  final val DETAIL_FIELD_NUMBER = 2
  def of(
    stackEntries: _root_.scala.Seq[_root_.scala.Predef.String],
    detail: _root_.scala.Predef.String
  ): _root_.com.google.rpc.DebugInfo = _root_.com.google.rpc.DebugInfo(
    stackEntries,
    detail
  )
}
