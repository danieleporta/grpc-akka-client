// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.rpc

/** Contains metadata about the request that clients can attach when filing a bug
  * or providing other forms of feedback.
  *
  * @param requestId
  *   An opaque string that should only be interpreted by the service generating
  *   it. For example, it can be used to identify requests in the service's logs.
  * @param servingData
  *   Any data that was used to serve this request. For example, an encrypted
  *   stack trace that can be sent back to the service provider for debugging.
  */
@SerialVersionUID(0L)
final case class RequestInfo(
    requestId: _root_.scala.Predef.String = "",
    servingData: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[RequestInfo] with scalapb.lenses.Updatable[RequestInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = requestId
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = servingData
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = requestId
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = servingData
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.rpc.RequestInfo = {
      var __requestId = this.requestId
      var __servingData = this.servingData
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __requestId = _input__.readString()
          case 18 =>
            __servingData = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      com.google.rpc.RequestInfo(
          requestId = __requestId,
          servingData = __servingData
      )
    }
    def withRequestId(__v: _root_.scala.Predef.String): RequestInfo = copy(requestId = __v)
    def withServingData(__v: _root_.scala.Predef.String): RequestInfo = copy(servingData = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = requestId
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = servingData
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(requestId)
        case 2 => _root_.scalapb.descriptors.PString(servingData)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.rpc.RequestInfo
}

object RequestInfo extends scalapb.GeneratedMessageCompanion[com.google.rpc.RequestInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.rpc.RequestInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.rpc.RequestInfo = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.rpc.RequestInfo(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.rpc.RequestInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.rpc.RequestInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ErrorDetailsProto.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ErrorDetailsProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.rpc.RequestInfo(
    requestId = "",
    servingData = ""
  )
  implicit class RequestInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.rpc.RequestInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.rpc.RequestInfo](_l) {
    def requestId: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.requestId)((c_, f_) => c_.copy(requestId = f_))
    def servingData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.servingData)((c_, f_) => c_.copy(servingData = f_))
  }
  final val REQUEST_ID_FIELD_NUMBER = 1
  final val SERVING_DATA_FIELD_NUMBER = 2
  def of(
    requestId: _root_.scala.Predef.String,
    servingData: _root_.scala.Predef.String
  ): _root_.com.google.rpc.RequestInfo = _root_.com.google.rpc.RequestInfo(
    requestId,
    servingData
  )
}
