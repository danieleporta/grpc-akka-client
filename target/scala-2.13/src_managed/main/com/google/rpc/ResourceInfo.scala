// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.rpc

/** Describes the resource that is being accessed.
  *
  * @param resourceType
  *   A name for the type of resource being accessed, e.g. "sql table",
  *   "cloud storage bucket", "file", "Google calendar"; or the type URL
  *   of the resource: e.g. "type.googleapis.com/google.pubsub.v1.Topic".
  * @param resourceName
  *   The name of the resource being accessed.  For example, a shared calendar
  *   name: "example.com_4fghdhgsrgh&#64;group.calendar.google.com", if the current
  *   error is [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED].
  * @param owner
  *   The owner of the resource (optional).
  *   For example, "user:&lt;owner email&gt;" or "project:&lt;Google developer project
  *   id&gt;".
  * @param description
  *   Describes what error is encountered when accessing this resource.
  *   For example, updating a cloud project may require the `writer` permission
  *   on the developer console project.
  */
@SerialVersionUID(0L)
final case class ResourceInfo(
    resourceType: _root_.scala.Predef.String = "",
    resourceName: _root_.scala.Predef.String = "",
    owner: _root_.scala.Predef.String = "",
    description: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[ResourceInfo] with scalapb.lenses.Updatable[ResourceInfo] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = resourceType
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = resourceName
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = owner
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = description
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = resourceType
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = resourceName
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = owner
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = description
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.rpc.ResourceInfo = {
      var __resourceType = this.resourceType
      var __resourceName = this.resourceName
      var __owner = this.owner
      var __description = this.description
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __resourceType = _input__.readString()
          case 18 =>
            __resourceName = _input__.readString()
          case 26 =>
            __owner = _input__.readString()
          case 34 =>
            __description = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      com.google.rpc.ResourceInfo(
          resourceType = __resourceType,
          resourceName = __resourceName,
          owner = __owner,
          description = __description
      )
    }
    def withResourceType(__v: _root_.scala.Predef.String): ResourceInfo = copy(resourceType = __v)
    def withResourceName(__v: _root_.scala.Predef.String): ResourceInfo = copy(resourceName = __v)
    def withOwner(__v: _root_.scala.Predef.String): ResourceInfo = copy(owner = __v)
    def withDescription(__v: _root_.scala.Predef.String): ResourceInfo = copy(description = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = resourceType
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = resourceName
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = owner
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = description
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(resourceType)
        case 2 => _root_.scalapb.descriptors.PString(resourceName)
        case 3 => _root_.scalapb.descriptors.PString(owner)
        case 4 => _root_.scalapb.descriptors.PString(description)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.rpc.ResourceInfo
}

object ResourceInfo extends scalapb.GeneratedMessageCompanion[com.google.rpc.ResourceInfo] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.rpc.ResourceInfo] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.rpc.ResourceInfo = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.rpc.ResourceInfo(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.rpc.ResourceInfo] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.rpc.ResourceInfo(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ErrorDetailsProto.javaDescriptor.getMessageTypes.get(6)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ErrorDetailsProto.scalaDescriptor.messages(6)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.rpc.ResourceInfo(
    resourceType = "",
    resourceName = "",
    owner = "",
    description = ""
  )
  implicit class ResourceInfoLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.rpc.ResourceInfo]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.rpc.ResourceInfo](_l) {
    def resourceType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.resourceType)((c_, f_) => c_.copy(resourceType = f_))
    def resourceName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.resourceName)((c_, f_) => c_.copy(resourceName = f_))
    def owner: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.owner)((c_, f_) => c_.copy(owner = f_))
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.description)((c_, f_) => c_.copy(description = f_))
  }
  final val RESOURCE_TYPE_FIELD_NUMBER = 1
  final val RESOURCE_NAME_FIELD_NUMBER = 2
  final val OWNER_FIELD_NUMBER = 3
  final val DESCRIPTION_FIELD_NUMBER = 4
  def of(
    resourceType: _root_.scala.Predef.String,
    resourceName: _root_.scala.Predef.String,
    owner: _root_.scala.Predef.String,
    description: _root_.scala.Predef.String
  ): _root_.com.google.rpc.ResourceInfo = _root_.com.google.rpc.ResourceInfo(
    resourceType,
    resourceName,
    owner,
    description
  )
}
