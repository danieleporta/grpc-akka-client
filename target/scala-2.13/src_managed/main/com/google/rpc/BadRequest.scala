// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.rpc

/** Describes violations in a client request. This error type focuses on the
  * syntactic aspects of the request.
  *
  * @param fieldViolations
  *   Describes all violations in a client request.
  */
@SerialVersionUID(0L)
final case class BadRequest(
    fieldViolations: _root_.scala.Seq[com.google.rpc.BadRequest.FieldViolation] = _root_.scala.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[BadRequest] with scalapb.lenses.Updatable[BadRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      fieldViolations.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      fieldViolations.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.rpc.BadRequest = {
      val __fieldViolations = (_root_.scala.collection.immutable.Vector.newBuilder[com.google.rpc.BadRequest.FieldViolation] ++= this.fieldViolations)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __fieldViolations += _root_.scalapb.LiteParser.readMessage(_input__, com.google.rpc.BadRequest.FieldViolation.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      com.google.rpc.BadRequest(
          fieldViolations = __fieldViolations.result()
      )
    }
    def clearFieldViolations = copy(fieldViolations = _root_.scala.Seq.empty)
    def addFieldViolations(__vs: com.google.rpc.BadRequest.FieldViolation*): BadRequest = addAllFieldViolations(__vs)
    def addAllFieldViolations(__vs: Iterable[com.google.rpc.BadRequest.FieldViolation]): BadRequest = copy(fieldViolations = fieldViolations ++ __vs)
    def withFieldViolations(__v: _root_.scala.Seq[com.google.rpc.BadRequest.FieldViolation]): BadRequest = copy(fieldViolations = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => fieldViolations
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(fieldViolations.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.rpc.BadRequest
}

object BadRequest extends scalapb.GeneratedMessageCompanion[com.google.rpc.BadRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.rpc.BadRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.rpc.BadRequest = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.rpc.BadRequest(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.Seq[com.google.rpc.BadRequest.FieldViolation]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.rpc.BadRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.rpc.BadRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[com.google.rpc.BadRequest.FieldViolation]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ErrorDetailsProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ErrorDetailsProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.google.rpc.BadRequest.FieldViolation
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.com.google.rpc.BadRequest.FieldViolation
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.rpc.BadRequest(
    fieldViolations = _root_.scala.Seq.empty
  )
  /** A message type used to describe a single bad request field.
    *
    * @param field
    *   A path leading to a field in the request body. The value will be a
    *   sequence of dot-separated identifiers that identify a protocol buffer
    *   field. E.g., "field_violations.field" would identify this field.
    * @param description
    *   A description of why the request element is bad.
    */
  @SerialVersionUID(0L)
  final case class FieldViolation(
      field: _root_.scala.Predef.String = "",
      description: _root_.scala.Predef.String = ""
      ) extends scalapb.GeneratedMessage with scalapb.Message[FieldViolation] with scalapb.lenses.Updatable[FieldViolation] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = field
          if (__value != "") {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = description
          if (__value != "") {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = field
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = description
          if (__v != "") {
            _output__.writeString(2, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.rpc.BadRequest.FieldViolation = {
        var __field = this.field
        var __description = this.description
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __field = _input__.readString()
            case 18 =>
              __description = _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        com.google.rpc.BadRequest.FieldViolation(
            field = __field,
            description = __description
        )
      }
      def withField(__v: _root_.scala.Predef.String): FieldViolation = copy(field = __v)
      def withDescription(__v: _root_.scala.Predef.String): FieldViolation = copy(description = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = field
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = description
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(field)
          case 2 => _root_.scalapb.descriptors.PString(description)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.google.rpc.BadRequest.FieldViolation
  }
  
  object FieldViolation extends scalapb.GeneratedMessageCompanion[com.google.rpc.BadRequest.FieldViolation] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.rpc.BadRequest.FieldViolation] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.rpc.BadRequest.FieldViolation = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.google.rpc.BadRequest.FieldViolation(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.rpc.BadRequest.FieldViolation] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.google.rpc.BadRequest.FieldViolation(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.google.rpc.BadRequest.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.google.rpc.BadRequest.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.google.rpc.BadRequest.FieldViolation(
      field = "",
      description = ""
    )
    implicit class FieldViolationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.rpc.BadRequest.FieldViolation]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.rpc.BadRequest.FieldViolation](_l) {
      def field: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.field)((c_, f_) => c_.copy(field = f_))
      def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.description)((c_, f_) => c_.copy(description = f_))
    }
    final val FIELD_FIELD_NUMBER = 1
    final val DESCRIPTION_FIELD_NUMBER = 2
    def of(
      field: _root_.scala.Predef.String,
      description: _root_.scala.Predef.String
    ): _root_.com.google.rpc.BadRequest.FieldViolation = _root_.com.google.rpc.BadRequest.FieldViolation(
      field,
      description
    )
  }
  
  implicit class BadRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.rpc.BadRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.rpc.BadRequest](_l) {
    def fieldViolations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.google.rpc.BadRequest.FieldViolation]] = field(_.fieldViolations)((c_, f_) => c_.copy(fieldViolations = f_))
  }
  final val FIELD_VIOLATIONS_FIELD_NUMBER = 1
  def of(
    fieldViolations: _root_.scala.Seq[com.google.rpc.BadRequest.FieldViolation]
  ): _root_.com.google.rpc.BadRequest = _root_.com.google.rpc.BadRequest(
    fieldViolations
  )
}
