// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.rpc

/** Provides links to documentation or for performing an out of band action.
  *
  * For example, if a quota check failed with an error indicating the calling
  * project hasn't enabled the accessed service, this can contain a URL pointing
  * directly to the right place in the developer console to flip the bit.
  *
  * @param links
  *   URL(s) pointing to additional information on handling the current error.
  */
@SerialVersionUID(0L)
final case class Help(
    links: _root_.scala.Seq[com.google.rpc.Help.Link] = _root_.scala.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[Help] with scalapb.lenses.Updatable[Help] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      links.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      links.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.rpc.Help = {
      val __links = (_root_.scala.collection.immutable.Vector.newBuilder[com.google.rpc.Help.Link] ++= this.links)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __links += _root_.scalapb.LiteParser.readMessage(_input__, com.google.rpc.Help.Link.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      com.google.rpc.Help(
          links = __links.result()
      )
    }
    def clearLinks = copy(links = _root_.scala.Seq.empty)
    def addLinks(__vs: com.google.rpc.Help.Link*): Help = addAllLinks(__vs)
    def addAllLinks(__vs: Iterable[com.google.rpc.Help.Link]): Help = copy(links = links ++ __vs)
    def withLinks(__v: _root_.scala.Seq[com.google.rpc.Help.Link]): Help = copy(links = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => links
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(links.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.rpc.Help
}

object Help extends scalapb.GeneratedMessageCompanion[com.google.rpc.Help] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.rpc.Help] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.rpc.Help = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.rpc.Help(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.Seq[com.google.rpc.Help.Link]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.rpc.Help] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.rpc.Help(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[com.google.rpc.Help.Link]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ErrorDetailsProto.javaDescriptor.getMessageTypes.get(7)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ErrorDetailsProto.scalaDescriptor.messages(7)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.google.rpc.Help.Link
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.com.google.rpc.Help.Link
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.rpc.Help(
    links = _root_.scala.Seq.empty
  )
  /** Describes a URL link.
    *
    * @param description
    *   Describes what the link offers.
    * @param url
    *   The URL of the link.
    */
  @SerialVersionUID(0L)
  final case class Link(
      description: _root_.scala.Predef.String = "",
      url: _root_.scala.Predef.String = ""
      ) extends scalapb.GeneratedMessage with scalapb.Message[Link] with scalapb.lenses.Updatable[Link] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = description
          if (__value != "") {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        
        {
          val __value = url
          if (__value != "") {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
          }
        };
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = description
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        {
          val __v = url
          if (__v != "") {
            _output__.writeString(2, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.rpc.Help.Link = {
        var __description = this.description
        var __url = this.url
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __description = _input__.readString()
            case 18 =>
              __url = _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        com.google.rpc.Help.Link(
            description = __description,
            url = __url
        )
      }
      def withDescription(__v: _root_.scala.Predef.String): Link = copy(description = __v)
      def withUrl(__v: _root_.scala.Predef.String): Link = copy(url = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = description
            if (__t != "") __t else null
          }
          case 2 => {
            val __t = url
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(description)
          case 2 => _root_.scalapb.descriptors.PString(url)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.google.rpc.Help.Link
  }
  
  object Link extends scalapb.GeneratedMessageCompanion[com.google.rpc.Help.Link] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.rpc.Help.Link] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.rpc.Help.Link = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.google.rpc.Help.Link(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.rpc.Help.Link] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.google.rpc.Help.Link(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.google.rpc.Help.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.google.rpc.Help.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.google.rpc.Help.Link(
      description = "",
      url = ""
    )
    implicit class LinkLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.rpc.Help.Link]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.rpc.Help.Link](_l) {
      def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.description)((c_, f_) => c_.copy(description = f_))
      def url: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.url)((c_, f_) => c_.copy(url = f_))
    }
    final val DESCRIPTION_FIELD_NUMBER = 1
    final val URL_FIELD_NUMBER = 2
    def of(
      description: _root_.scala.Predef.String,
      url: _root_.scala.Predef.String
    ): _root_.com.google.rpc.Help.Link = _root_.com.google.rpc.Help.Link(
      description,
      url
    )
  }
  
  implicit class HelpLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.rpc.Help]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.rpc.Help](_l) {
    def links: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.google.rpc.Help.Link]] = field(_.links)((c_, f_) => c_.copy(links = f_))
  }
  final val LINKS_FIELD_NUMBER = 1
  def of(
    links: _root_.scala.Seq[com.google.rpc.Help.Link]
  ): _root_.com.google.rpc.Help = _root_.com.google.rpc.Help(
    links
  )
}
