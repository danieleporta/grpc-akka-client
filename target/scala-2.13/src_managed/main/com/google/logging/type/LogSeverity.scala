// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.logging.`type`

/** The severity of the event described in a log entry, expressed as one of the
  * standard severity levels listed below.  For your reference, the levels are
  * assigned the listed numeric values. The effect of using numeric values other
  * than those listed is undefined.
  *
  * You can filter for log entries by severity.  For example, the following
  * filter expression will match log entries with severities `INFO`, `NOTICE`,
  * and `WARNING`:
  *
  *     severity &gt; DEBUG AND severity &lt;= WARNING
  *
  * If you are writing log entries, you should map other severity encodings to
  * one of these standard levels. For example, you might map all of Java's FINE,
  * FINER, and FINEST levels to `LogSeverity.DEBUG`. You can preserve the
  * original severity level in the log entry payload if you wish.
  */
sealed trait LogSeverity extends _root_.scalapb.GeneratedEnum {
  type EnumType = LogSeverity
  def isDefault: _root_.scala.Boolean = false
  def isDebug: _root_.scala.Boolean = false
  def isInfo: _root_.scala.Boolean = false
  def isNotice: _root_.scala.Boolean = false
  def isWarning: _root_.scala.Boolean = false
  def isError: _root_.scala.Boolean = false
  def isCritical: _root_.scala.Boolean = false
  def isAlert: _root_.scala.Boolean = false
  def isEmergency: _root_.scala.Boolean = false
  def companion: _root_.scalapb.GeneratedEnumCompanion[LogSeverity] = com.google.logging.`type`.LogSeverity
}

object LogSeverity extends _root_.scalapb.GeneratedEnumCompanion[LogSeverity] {
  implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[LogSeverity] = this
  /** (0) The log entry has no assigned severity level.
    */
  @SerialVersionUID(0L)
  case object DEFAULT extends LogSeverity {
    val value = 0
    val index = 0
    val name = "DEFAULT"
    override def isDefault: _root_.scala.Boolean = true
  }
  
  /** (100) Debug or trace information.
    */
  @SerialVersionUID(0L)
  case object DEBUG extends LogSeverity {
    val value = 100
    val index = 1
    val name = "DEBUG"
    override def isDebug: _root_.scala.Boolean = true
  }
  
  /** (200) Routine information, such as ongoing status or performance.
    */
  @SerialVersionUID(0L)
  case object INFO extends LogSeverity {
    val value = 200
    val index = 2
    val name = "INFO"
    override def isInfo: _root_.scala.Boolean = true
  }
  
  /** (300) Normal but significant events, such as start up, shut down, or
    * a configuration change.
    */
  @SerialVersionUID(0L)
  case object NOTICE extends LogSeverity {
    val value = 300
    val index = 3
    val name = "NOTICE"
    override def isNotice: _root_.scala.Boolean = true
  }
  
  /** (400) Warning events might cause problems.
    */
  @SerialVersionUID(0L)
  case object WARNING extends LogSeverity {
    val value = 400
    val index = 4
    val name = "WARNING"
    override def isWarning: _root_.scala.Boolean = true
  }
  
  /** (500) Error events are likely to cause problems.
    */
  @SerialVersionUID(0L)
  case object ERROR extends LogSeverity {
    val value = 500
    val index = 5
    val name = "ERROR"
    override def isError: _root_.scala.Boolean = true
  }
  
  /** (600) Critical events cause more severe problems or outages.
    */
  @SerialVersionUID(0L)
  case object CRITICAL extends LogSeverity {
    val value = 600
    val index = 6
    val name = "CRITICAL"
    override def isCritical: _root_.scala.Boolean = true
  }
  
  /** (700) A person must take an action immediately.
    */
  @SerialVersionUID(0L)
  case object ALERT extends LogSeverity {
    val value = 700
    val index = 7
    val name = "ALERT"
    override def isAlert: _root_.scala.Boolean = true
  }
  
  /** (800) One or more systems are unusable.
    */
  @SerialVersionUID(0L)
  case object EMERGENCY extends LogSeverity {
    val value = 800
    val index = 8
    val name = "EMERGENCY"
    override def isEmergency: _root_.scala.Boolean = true
  }
  
  @SerialVersionUID(0L)
  final case class Unrecognized(value: _root_.scala.Int) extends LogSeverity with _root_.scalapb.UnrecognizedEnum
  
  lazy val values = scala.collection.immutable.Seq(DEFAULT, DEBUG, INFO, NOTICE, WARNING, ERROR, CRITICAL, ALERT, EMERGENCY)
  def fromValue(value: _root_.scala.Int): LogSeverity = value match {
    case 0 => DEFAULT
    case 100 => DEBUG
    case 200 => INFO
    case 300 => NOTICE
    case 400 => WARNING
    case 500 => ERROR
    case 600 => CRITICAL
    case 700 => ALERT
    case 800 => EMERGENCY
    case __other => Unrecognized(__other)
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = LogSeverityProto.javaDescriptor.getEnumTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = LogSeverityProto.scalaDescriptor.enums(0)
}