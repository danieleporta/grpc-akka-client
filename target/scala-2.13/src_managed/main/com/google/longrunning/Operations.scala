
// Generated by Akka gRPC. DO NOT EDIT.
package com.google.longrunning

/**
 * Manages long-running operations with an API service.
 *  When an API method normally takes long time to complete, it can be designed
 * to return [Operation][google.longrunning.Operation] to the client, and the client can use this
 * interface to receive the real response asynchronously by polling the
 * operation resource, or pass the operation resource to another API (such as
 * Google Cloud Pub/Sub API) to receive the response.  Any API service that
 * returns long-running operations should implement the `Operations` interface
 * so developers can have a consistent client experience.
 */
trait Operations {
  
  /**
   * Lists operations that match the specified filter in the request. If the
   * server doesn't support this method, it returns `UNIMPLEMENTED`.
   *  NOTE: the `name` binding below allows API services to override the binding
   * to use different resource name schemes, such as `users/&#42;/operations`.
   */
  def listOperations(in: com.google.longrunning.ListOperationsRequest): scala.concurrent.Future[com.google.longrunning.ListOperationsResponse]
  
  /**
   * Gets the latest state of a long-running operation.  Clients can use this
   * method to poll the operation result at intervals as recommended by the API
   * service.
   */
  def getOperation(in: com.google.longrunning.GetOperationRequest): scala.concurrent.Future[com.google.longrunning.Operation]
  
  /**
   * Deletes a long-running operation. This method indicates that the client is
   * no longer interested in the operation result. It does not cancel the
   * operation. If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.
   */
  def deleteOperation(in: com.google.longrunning.DeleteOperationRequest): scala.concurrent.Future[com.google.protobuf.empty.Empty]
  
  /**
   * Starts asynchronous cancellation on a long-running operation.  The server
   * makes a best effort to cancel the operation, but success is not
   * guaranteed.  If the server doesn't support this method, it returns
   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use
   * [Operations.GetOperation][google.longrunning.Operations.GetOperation] or
   * other methods to check whether the cancellation succeeded or whether the
   * operation completed despite cancellation. On successful cancellation,
   * the operation is not deleted; instead, it becomes an operation with
   * an [Operation.error][google.longrunning.Operation.error] value with a [google.rpc.Status.code][google.rpc.Status.code] of 1,
   * corresponding to `Code.CANCELLED`.
   */
  def cancelOperation(in: com.google.longrunning.CancelOperationRequest): scala.concurrent.Future[com.google.protobuf.empty.Empty]
  
}

object Operations {
  val name = "google.longrunning.Operations"

  object Serializers {
    import akka.grpc.scaladsl.ScalapbProtobufSerializer
    
    val OperationSerializer = new ScalapbProtobufSerializer(com.google.longrunning.Operation.messageCompanion)
    
    val EmptySerializer = new ScalapbProtobufSerializer(com.google.protobuf.empty.Empty.messageCompanion)
    
    val ListOperationsRequestSerializer = new ScalapbProtobufSerializer(com.google.longrunning.ListOperationsRequest.messageCompanion)
    
    val CancelOperationRequestSerializer = new ScalapbProtobufSerializer(com.google.longrunning.CancelOperationRequest.messageCompanion)
    
    val ListOperationsResponseSerializer = new ScalapbProtobufSerializer(com.google.longrunning.ListOperationsResponse.messageCompanion)
    
    val GetOperationRequestSerializer = new ScalapbProtobufSerializer(com.google.longrunning.GetOperationRequest.messageCompanion)
    
    val DeleteOperationRequestSerializer = new ScalapbProtobufSerializer(com.google.longrunning.DeleteOperationRequest.messageCompanion)
    
  }
}
