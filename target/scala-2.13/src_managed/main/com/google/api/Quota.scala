// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.api

/** Quota configuration helps to achieve fairness and budgeting in service
  * usage.
  *
  * The quota configuration works this way:
  * - The service configuration defines a set of metrics.
  * - For API calls, the quota.metric_rules maps methods to metrics with
  *   corresponding costs.
  * - The quota.limits defines limits on the metrics, which will be used for
  *   quota checks at runtime.
  *
  * An example quota configuration in yaml format:
  *
  *    quota:
  *      limits:
  *
  *      - name: apiWriteQpsPerProject
  *        metric: library.googleapis.com/write_calls
  *        unit: "1/min/{project}"  # rate limit for consumer projects
  *        values:
  *          STANDARD: 10000
  *
  *      # The metric rules bind all methods to the read_calls metric,
  *      # except for the UpdateBook and DeleteBook methods. These two methods
  *      # are mapped to the write_calls metric, with the UpdateBook method
  *      # consuming at twice rate as the DeleteBook method.
  *      metric_rules:
  *      - selector: "*"
  *        metric_costs:
  *          library.googleapis.com/read_calls: 1
  *      - selector: google.example.library.v1.LibraryService.UpdateBook
  *        metric_costs:
  *          library.googleapis.com/write_calls: 2
  *      - selector: google.example.library.v1.LibraryService.DeleteBook
  *        metric_costs:
  *          library.googleapis.com/write_calls: 1
  *
  *  Corresponding Metric definition:
  *
  *      metrics:
  *      - name: library.googleapis.com/read_calls
  *        display_name: Read requests
  *        metric_kind: DELTA
  *        value_type: INT64
  *
  *      - name: library.googleapis.com/write_calls
  *        display_name: Write requests
  *        metric_kind: DELTA
  *        value_type: INT64
  *
  * @param limits
  *   List of `QuotaLimit` definitions for the service.
  *  
  *   Used by metric-based quotas only.
  * @param metricRules
  *   List of `MetricRule` definitions, each one mapping a selected method to one
  *   or more metrics.
  *  
  *   Used by metric-based quotas only.
  */
@SerialVersionUID(0L)
final case class Quota(
    limits: _root_.scala.Seq[com.google.api.QuotaLimit] = _root_.scala.Seq.empty,
    metricRules: _root_.scala.Seq[com.google.api.MetricRule] = _root_.scala.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[Quota] with scalapb.lenses.Updatable[Quota] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      limits.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      metricRules.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      limits.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      metricRules.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.api.Quota = {
      val __limits = (_root_.scala.collection.immutable.Vector.newBuilder[com.google.api.QuotaLimit] ++= this.limits)
      val __metricRules = (_root_.scala.collection.immutable.Vector.newBuilder[com.google.api.MetricRule] ++= this.metricRules)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 26 =>
            __limits += _root_.scalapb.LiteParser.readMessage(_input__, com.google.api.QuotaLimit.defaultInstance)
          case 34 =>
            __metricRules += _root_.scalapb.LiteParser.readMessage(_input__, com.google.api.MetricRule.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      com.google.api.Quota(
          limits = __limits.result(),
          metricRules = __metricRules.result()
      )
    }
    def clearLimits = copy(limits = _root_.scala.Seq.empty)
    def addLimits(__vs: com.google.api.QuotaLimit*): Quota = addAllLimits(__vs)
    def addAllLimits(__vs: Iterable[com.google.api.QuotaLimit]): Quota = copy(limits = limits ++ __vs)
    def withLimits(__v: _root_.scala.Seq[com.google.api.QuotaLimit]): Quota = copy(limits = __v)
    def clearMetricRules = copy(metricRules = _root_.scala.Seq.empty)
    def addMetricRules(__vs: com.google.api.MetricRule*): Quota = addAllMetricRules(__vs)
    def addAllMetricRules(__vs: Iterable[com.google.api.MetricRule]): Quota = copy(metricRules = metricRules ++ __vs)
    def withMetricRules(__v: _root_.scala.Seq[com.google.api.MetricRule]): Quota = copy(metricRules = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 3 => limits
        case 4 => metricRules
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 3 => _root_.scalapb.descriptors.PRepeated(limits.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(metricRules.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.api.Quota
}

object Quota extends scalapb.GeneratedMessageCompanion[com.google.api.Quota] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.api.Quota] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.api.Quota = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.api.Quota(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.Seq[com.google.api.QuotaLimit]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.Seq[com.google.api.MetricRule]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.api.Quota] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.api.Quota(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[com.google.api.QuotaLimit]]).getOrElse(_root_.scala.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[com.google.api.MetricRule]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = QuotaProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = QuotaProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = com.google.api.QuotaLimit
      case 4 => __out = com.google.api.MetricRule
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.api.Quota(
    limits = _root_.scala.Seq.empty,
    metricRules = _root_.scala.Seq.empty
  )
  implicit class QuotaLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.api.Quota]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.api.Quota](_l) {
    def limits: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.google.api.QuotaLimit]] = field(_.limits)((c_, f_) => c_.copy(limits = f_))
    def metricRules: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.google.api.MetricRule]] = field(_.metricRules)((c_, f_) => c_.copy(metricRules = f_))
  }
  final val LIMITS_FIELD_NUMBER = 3
  final val METRIC_RULES_FIELD_NUMBER = 4
  def of(
    limits: _root_.scala.Seq[com.google.api.QuotaLimit],
    metricRules: _root_.scala.Seq[com.google.api.MetricRule]
  ): _root_.com.google.api.Quota = _root_.com.google.api.Quota(
    limits,
    metricRules
  )
}
