// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.api

/** Defines project properties.
  *
  * API services can define properties that can be assigned to consumer projects
  * so that backends can perform response customization without having to make
  * additional calls or maintain additional storage. For example, Maps API
  * defines properties that controls map tile cache period, or whether to embed a
  * watermark in a result.
  *
  * These values can be set via API producer console. Only API providers can
  * define and set these properties.
  *
  * @param name
  *   The name of the property (a.k.a key).
  * @param type
  *   The type of this property.
  * @param description
  *   The description of the property
  */
@SerialVersionUID(0L)
final case class Property(
    name: _root_.scala.Predef.String = "",
    `type`: com.google.api.Property.PropertyType = com.google.api.Property.PropertyType.UNSPECIFIED,
    description: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[Property] with scalapb.lenses.Updatable[Property] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = name
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = `type`
        if (__value != com.google.api.Property.PropertyType.UNSPECIFIED) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value.value)
        }
      };
      
      {
        val __value = description
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = name
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = `type`
        if (__v != com.google.api.Property.PropertyType.UNSPECIFIED) {
          _output__.writeEnum(2, __v.value)
        }
      };
      {
        val __v = description
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.api.Property = {
      var __name = this.name
      var __type = this.`type`
      var __description = this.description
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __name = _input__.readString()
          case 16 =>
            __type = com.google.api.Property.PropertyType.fromValue(_input__.readEnum())
          case 26 =>
            __description = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      com.google.api.Property(
          name = __name,
          `type` = __type,
          description = __description
      )
    }
    def withName(__v: _root_.scala.Predef.String): Property = copy(name = __v)
    def withType(__v: com.google.api.Property.PropertyType): Property = copy(`type` = __v)
    def withDescription(__v: _root_.scala.Predef.String): Property = copy(description = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = name
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = `type`.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 3 => {
          val __t = description
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(name)
        case 2 => _root_.scalapb.descriptors.PEnum(`type`.scalaValueDescriptor)
        case 3 => _root_.scalapb.descriptors.PString(description)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.api.Property
}

object Property extends scalapb.GeneratedMessageCompanion[com.google.api.Property] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.api.Property] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.api.Property = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.api.Property(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      com.google.api.Property.PropertyType.fromValue(__fieldsMap.getOrElse(__fields.get(1), com.google.api.Property.PropertyType.UNSPECIFIED.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.api.Property] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.api.Property(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        com.google.api.Property.PropertyType.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(com.google.api.Property.PropertyType.UNSPECIFIED.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ConsumerProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ConsumerProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => com.google.api.Property.PropertyType
    }
  }
  lazy val defaultInstance = com.google.api.Property(
    name = "",
    `type` = com.google.api.Property.PropertyType.UNSPECIFIED,
    description = ""
  )
  /** Supported data type of the property values
    */
  sealed trait PropertyType extends _root_.scalapb.GeneratedEnum {
    type EnumType = PropertyType
    def isUnspecified: _root_.scala.Boolean = false
    def isInt64: _root_.scala.Boolean = false
    def isBool: _root_.scala.Boolean = false
    def isString: _root_.scala.Boolean = false
    def isDouble: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[PropertyType] = com.google.api.Property.PropertyType
  }
  
  object PropertyType extends _root_.scalapb.GeneratedEnumCompanion[PropertyType] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[PropertyType] = this
    /** The type is unspecified, and will result in an error.
      */
    @SerialVersionUID(0L)
    case object UNSPECIFIED extends PropertyType {
      val value = 0
      val index = 0
      val name = "UNSPECIFIED"
      override def isUnspecified: _root_.scala.Boolean = true
    }
    
    /** The type is `int64`.
      */
    @SerialVersionUID(0L)
    case object INT64 extends PropertyType {
      val value = 1
      val index = 1
      val name = "INT64"
      override def isInt64: _root_.scala.Boolean = true
    }
    
    /** The type is `bool`.
      */
    @SerialVersionUID(0L)
    case object BOOL extends PropertyType {
      val value = 2
      val index = 2
      val name = "BOOL"
      override def isBool: _root_.scala.Boolean = true
    }
    
    /** The type is `string`.
      */
    @SerialVersionUID(0L)
    case object STRING extends PropertyType {
      val value = 3
      val index = 3
      val name = "STRING"
      override def isString: _root_.scala.Boolean = true
    }
    
    /** The type is 'double'.
      */
    @SerialVersionUID(0L)
    case object DOUBLE extends PropertyType {
      val value = 4
      val index = 4
      val name = "DOUBLE"
      override def isDouble: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends PropertyType with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.immutable.Seq(UNSPECIFIED, INT64, BOOL, STRING, DOUBLE)
    def fromValue(value: _root_.scala.Int): PropertyType = value match {
      case 0 => UNSPECIFIED
      case 1 => INT64
      case 2 => BOOL
      case 3 => STRING
      case 4 => DOUBLE
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = com.google.api.Property.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = com.google.api.Property.scalaDescriptor.enums(0)
  }
  implicit class PropertyLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.api.Property]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.api.Property](_l) {
    def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
    def `type`: _root_.scalapb.lenses.Lens[UpperPB, com.google.api.Property.PropertyType] = field(_.`type`)((c_, f_) => c_.copy(`type` = f_))
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.description)((c_, f_) => c_.copy(description = f_))
  }
  final val NAME_FIELD_NUMBER = 1
  final val TYPE_FIELD_NUMBER = 2
  final val DESCRIPTION_FIELD_NUMBER = 3
  def of(
    name: _root_.scala.Predef.String,
    `type`: com.google.api.Property.PropertyType,
    description: _root_.scala.Predef.String
  ): _root_.com.google.api.Property = _root_.com.google.api.Property(
    name,
    `type`,
    description
  )
}
