// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.api

/** Logging configuration of the service.
  *
  * The following example shows how to configure logs to be sent to the
  * producer and consumer projects. In the example, the `activity_history`
  * log is sent to both the producer and consumer projects, whereas the
  * `purchase_history` log is only sent to the producer project.
  *
  *     monitored_resources:
  *     - type: library.googleapis.com/branch
  *       labels:
  *       - key: /city
  *         description: The city where the library branch is located in.
  *       - key: /name
  *         description: The name of the branch.
  *     logs:
  *     - name: activity_history
  *       labels:
  *       - key: /customer_id
  *     - name: purchase_history
  *     logging:
  *       producer_destinations:
  *       - monitored_resource: library.googleapis.com/branch
  *         logs:
  *         - activity_history
  *         - purchase_history
  *       consumer_destinations:
  *       - monitored_resource: library.googleapis.com/branch
  *         logs:
  *         - activity_history
  *
  * @param producerDestinations
  *   Logging configurations for sending logs to the producer project.
  *   There can be multiple producer destinations, each one must have a
  *   different monitored resource type. A log can be used in at most
  *   one producer destination.
  * @param consumerDestinations
  *   Logging configurations for sending logs to the consumer project.
  *   There can be multiple consumer destinations, each one must have a
  *   different monitored resource type. A log can be used in at most
  *   one consumer destination.
  */
@SerialVersionUID(0L)
final case class Logging(
    producerDestinations: _root_.scala.Seq[com.google.api.Logging.LoggingDestination] = _root_.scala.Seq.empty,
    consumerDestinations: _root_.scala.Seq[com.google.api.Logging.LoggingDestination] = _root_.scala.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[Logging] with scalapb.lenses.Updatable[Logging] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      producerDestinations.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      consumerDestinations.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      producerDestinations.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      consumerDestinations.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.api.Logging = {
      val __producerDestinations = (_root_.scala.collection.immutable.Vector.newBuilder[com.google.api.Logging.LoggingDestination] ++= this.producerDestinations)
      val __consumerDestinations = (_root_.scala.collection.immutable.Vector.newBuilder[com.google.api.Logging.LoggingDestination] ++= this.consumerDestinations)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __producerDestinations += _root_.scalapb.LiteParser.readMessage(_input__, com.google.api.Logging.LoggingDestination.defaultInstance)
          case 18 =>
            __consumerDestinations += _root_.scalapb.LiteParser.readMessage(_input__, com.google.api.Logging.LoggingDestination.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      com.google.api.Logging(
          producerDestinations = __producerDestinations.result(),
          consumerDestinations = __consumerDestinations.result()
      )
    }
    def clearProducerDestinations = copy(producerDestinations = _root_.scala.Seq.empty)
    def addProducerDestinations(__vs: com.google.api.Logging.LoggingDestination*): Logging = addAllProducerDestinations(__vs)
    def addAllProducerDestinations(__vs: Iterable[com.google.api.Logging.LoggingDestination]): Logging = copy(producerDestinations = producerDestinations ++ __vs)
    def withProducerDestinations(__v: _root_.scala.Seq[com.google.api.Logging.LoggingDestination]): Logging = copy(producerDestinations = __v)
    def clearConsumerDestinations = copy(consumerDestinations = _root_.scala.Seq.empty)
    def addConsumerDestinations(__vs: com.google.api.Logging.LoggingDestination*): Logging = addAllConsumerDestinations(__vs)
    def addAllConsumerDestinations(__vs: Iterable[com.google.api.Logging.LoggingDestination]): Logging = copy(consumerDestinations = consumerDestinations ++ __vs)
    def withConsumerDestinations(__v: _root_.scala.Seq[com.google.api.Logging.LoggingDestination]): Logging = copy(consumerDestinations = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => producerDestinations
        case 2 => consumerDestinations
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(producerDestinations.iterator.map(_.toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PRepeated(consumerDestinations.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.api.Logging
}

object Logging extends scalapb.GeneratedMessageCompanion[com.google.api.Logging] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.api.Logging] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.api.Logging = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.api.Logging(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.Seq[com.google.api.Logging.LoggingDestination]],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.Seq[com.google.api.Logging.LoggingDestination]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.api.Logging] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.api.Logging(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[com.google.api.Logging.LoggingDestination]]).getOrElse(_root_.scala.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[com.google.api.Logging.LoggingDestination]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = LoggingProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = LoggingProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = com.google.api.Logging.LoggingDestination
      case 2 => __out = com.google.api.Logging.LoggingDestination
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.com.google.api.Logging.LoggingDestination
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.api.Logging(
    producerDestinations = _root_.scala.Seq.empty,
    consumerDestinations = _root_.scala.Seq.empty
  )
  /** Configuration of a specific logging destination (the producer project
    * or the consumer project).
    *
    * @param monitoredResource
    *   The monitored resource type. The type must be defined in the
    *   [Service.monitored_resources][google.api.Service.monitored_resources] section.
    * @param logs
    *   Names of the logs to be sent to this destination. Each name must
    *   be defined in the [Service.logs][google.api.Service.logs] section. If the log name is
    *   not a domain scoped name, it will be automatically prefixed with
    *   the service name followed by "/".
    */
  @SerialVersionUID(0L)
  final case class LoggingDestination(
      monitoredResource: _root_.scala.Predef.String = "",
      logs: _root_.scala.Seq[_root_.scala.Predef.String] = _root_.scala.Seq.empty
      ) extends scalapb.GeneratedMessage with scalapb.Message[LoggingDestination] with scalapb.lenses.Updatable[LoggingDestination] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = monitoredResource
          if (__value != "") {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
          }
        };
        logs.foreach { __item =>
          val __value = __item
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        logs.foreach { __v =>
          val __m = __v
          _output__.writeString(1, __m)
        };
        {
          val __v = monitoredResource
          if (__v != "") {
            _output__.writeString(3, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.api.Logging.LoggingDestination = {
        var __monitoredResource = this.monitoredResource
        val __logs = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Predef.String] ++= this.logs)
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 26 =>
              __monitoredResource = _input__.readString()
            case 10 =>
              __logs += _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        com.google.api.Logging.LoggingDestination(
            monitoredResource = __monitoredResource,
            logs = __logs.result()
        )
      }
      def withMonitoredResource(__v: _root_.scala.Predef.String): LoggingDestination = copy(monitoredResource = __v)
      def clearLogs = copy(logs = _root_.scala.Seq.empty)
      def addLogs(__vs: _root_.scala.Predef.String*): LoggingDestination = addAllLogs(__vs)
      def addAllLogs(__vs: Iterable[_root_.scala.Predef.String]): LoggingDestination = copy(logs = logs ++ __vs)
      def withLogs(__v: _root_.scala.Seq[_root_.scala.Predef.String]): LoggingDestination = copy(logs = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 3 => {
            val __t = monitoredResource
            if (__t != "") __t else null
          }
          case 1 => logs
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 3 => _root_.scalapb.descriptors.PString(monitoredResource)
          case 1 => _root_.scalapb.descriptors.PRepeated(logs.iterator.map(_root_.scalapb.descriptors.PString).toVector)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = com.google.api.Logging.LoggingDestination
  }
  
  object LoggingDestination extends scalapb.GeneratedMessageCompanion[com.google.api.Logging.LoggingDestination] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.api.Logging.LoggingDestination] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.api.Logging.LoggingDestination = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      com.google.api.Logging.LoggingDestination(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.Seq[_root_.scala.Predef.String]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.api.Logging.LoggingDestination] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        com.google.api.Logging.LoggingDestination(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[_root_.scala.Predef.String]]).getOrElse(_root_.scala.Seq.empty)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = com.google.api.Logging.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = com.google.api.Logging.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = com.google.api.Logging.LoggingDestination(
      monitoredResource = "",
      logs = _root_.scala.Seq.empty
    )
    implicit class LoggingDestinationLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.api.Logging.LoggingDestination]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.api.Logging.LoggingDestination](_l) {
      def monitoredResource: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.monitoredResource)((c_, f_) => c_.copy(monitoredResource = f_))
      def logs: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Predef.String]] = field(_.logs)((c_, f_) => c_.copy(logs = f_))
    }
    final val MONITORED_RESOURCE_FIELD_NUMBER = 3
    final val LOGS_FIELD_NUMBER = 1
    def of(
      monitoredResource: _root_.scala.Predef.String,
      logs: _root_.scala.Seq[_root_.scala.Predef.String]
    ): _root_.com.google.api.Logging.LoggingDestination = _root_.com.google.api.Logging.LoggingDestination(
      monitoredResource,
      logs
    )
  }
  
  implicit class LoggingLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.api.Logging]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.api.Logging](_l) {
    def producerDestinations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.google.api.Logging.LoggingDestination]] = field(_.producerDestinations)((c_, f_) => c_.copy(producerDestinations = f_))
    def consumerDestinations: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[com.google.api.Logging.LoggingDestination]] = field(_.consumerDestinations)((c_, f_) => c_.copy(consumerDestinations = f_))
  }
  final val PRODUCER_DESTINATIONS_FIELD_NUMBER = 1
  final val CONSUMER_DESTINATIONS_FIELD_NUMBER = 2
  def of(
    producerDestinations: _root_.scala.Seq[com.google.api.Logging.LoggingDestination],
    consumerDestinations: _root_.scala.Seq[com.google.api.Logging.LoggingDestination]
  ): _root_.com.google.api.Logging = _root_.com.google.api.Logging(
    producerDestinations,
    consumerDestinations
  )
}
