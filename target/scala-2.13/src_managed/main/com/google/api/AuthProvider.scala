// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.api

/** Configuration for an anthentication provider, including support for
  * [JSON Web Token (JWT)](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32).
  *
  * @param id
  *   The unique identifier of the auth provider. It will be referred to by
  *   `AuthRequirement.provider_id`.
  *  
  *   Example: "bookstore_auth".
  * @param issuer
  *   Identifies the principal that issued the JWT. See
  *   https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.1
  *   Usually a URL or an email address.
  *  
  *   Example: https://securetoken.google.com
  *   Example: 1234567-compute&#64;developer.gserviceaccount.com
  * @param jwksUri
  *   URL of the provider's public key set to validate signature of the JWT. See
  *   [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html#ProviderMetadata).
  *   Optional if the key set document:
  *    - can be retrieved from
  *      [OpenID Discovery](https://openid.net/specs/openid-connect-discovery-1_0.html
  *      of the issuer.
  *    - can be inferred from the email domain of the issuer (e.g. a Google service account).
  *  
  *   Example: https://www.googleapis.com/oauth2/v1/certs
  * @param audiences
  *   The list of JWT
  *   [audiences](https://tools.ietf.org/html/draft-ietf-oauth-json-web-token-32#section-4.1.3).
  *   that are allowed to access. A JWT containing any of these audiences will
  *   be accepted. When this setting is absent, only JWTs with audience
  *   "https://[Service_name][google.api.Service.name]/[API_name][google.protobuf.Api.name]"
  *   will be accepted. For example, if no audiences are in the setting,
  *   LibraryService API will only accept JWTs with the following audience
  *   "https://library-example.googleapis.com/google.example.library.v1.LibraryService".
  *  
  *   Example:
  *  
  *       audiences: bookstore_android.apps.googleusercontent.com,
  *                  bookstore_web.apps.googleusercontent.com
  * @param authorizationUrl
  *   Redirect URL if JWT token is required but no present or is expired.
  *   Implement authorizationUrl of securityDefinitions in OpenAPI spec.
  */
@SerialVersionUID(0L)
final case class AuthProvider(
    id: _root_.scala.Predef.String = "",
    issuer: _root_.scala.Predef.String = "",
    jwksUri: _root_.scala.Predef.String = "",
    audiences: _root_.scala.Predef.String = "",
    authorizationUrl: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[AuthProvider] with scalapb.lenses.Updatable[AuthProvider] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = id
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = issuer
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = jwksUri
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = audiences
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
        }
      };
      
      {
        val __value = authorizationUrl
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(5, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = id
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = issuer
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = jwksUri
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = audiences
        if (__v != "") {
          _output__.writeString(4, __v)
        }
      };
      {
        val __v = authorizationUrl
        if (__v != "") {
          _output__.writeString(5, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.api.AuthProvider = {
      var __id = this.id
      var __issuer = this.issuer
      var __jwksUri = this.jwksUri
      var __audiences = this.audiences
      var __authorizationUrl = this.authorizationUrl
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __id = _input__.readString()
          case 18 =>
            __issuer = _input__.readString()
          case 26 =>
            __jwksUri = _input__.readString()
          case 34 =>
            __audiences = _input__.readString()
          case 42 =>
            __authorizationUrl = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      com.google.api.AuthProvider(
          id = __id,
          issuer = __issuer,
          jwksUri = __jwksUri,
          audiences = __audiences,
          authorizationUrl = __authorizationUrl
      )
    }
    def withId(__v: _root_.scala.Predef.String): AuthProvider = copy(id = __v)
    def withIssuer(__v: _root_.scala.Predef.String): AuthProvider = copy(issuer = __v)
    def withJwksUri(__v: _root_.scala.Predef.String): AuthProvider = copy(jwksUri = __v)
    def withAudiences(__v: _root_.scala.Predef.String): AuthProvider = copy(audiences = __v)
    def withAuthorizationUrl(__v: _root_.scala.Predef.String): AuthProvider = copy(authorizationUrl = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = id
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = issuer
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = jwksUri
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = audiences
          if (__t != "") __t else null
        }
        case 5 => {
          val __t = authorizationUrl
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(id)
        case 2 => _root_.scalapb.descriptors.PString(issuer)
        case 3 => _root_.scalapb.descriptors.PString(jwksUri)
        case 4 => _root_.scalapb.descriptors.PString(audiences)
        case 5 => _root_.scalapb.descriptors.PString(authorizationUrl)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.api.AuthProvider
}

object AuthProvider extends scalapb.GeneratedMessageCompanion[com.google.api.AuthProvider] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.api.AuthProvider] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.api.AuthProvider = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.api.AuthProvider(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(4), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.api.AuthProvider] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.api.AuthProvider(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = AuthProto.javaDescriptor.getMessageTypes.get(2)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = AuthProto.scalaDescriptor.messages(2)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.api.AuthProvider(
    id = "",
    issuer = "",
    jwksUri = "",
    audiences = "",
    authorizationUrl = ""
  )
  implicit class AuthProviderLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.api.AuthProvider]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.api.AuthProvider](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.id)((c_, f_) => c_.copy(id = f_))
    def issuer: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.issuer)((c_, f_) => c_.copy(issuer = f_))
    def jwksUri: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.jwksUri)((c_, f_) => c_.copy(jwksUri = f_))
    def audiences: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.audiences)((c_, f_) => c_.copy(audiences = f_))
    def authorizationUrl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.authorizationUrl)((c_, f_) => c_.copy(authorizationUrl = f_))
  }
  final val ID_FIELD_NUMBER = 1
  final val ISSUER_FIELD_NUMBER = 2
  final val JWKS_URI_FIELD_NUMBER = 3
  final val AUDIENCES_FIELD_NUMBER = 4
  final val AUTHORIZATION_URL_FIELD_NUMBER = 5
  def of(
    id: _root_.scala.Predef.String,
    issuer: _root_.scala.Predef.String,
    jwksUri: _root_.scala.Predef.String,
    audiences: _root_.scala.Predef.String,
    authorizationUrl: _root_.scala.Predef.String
  ): _root_.com.google.api.AuthProvider = _root_.com.google.api.AuthProvider(
    id,
    issuer,
    jwksUri,
    audiences,
    authorizationUrl
  )
}
