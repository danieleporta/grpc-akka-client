// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package com.google.api

/** Usage configuration rules for the service.
  *
  * NOTE: Under development.
  *
  *
  * Use this rule to configure unregistered calls for the service. Unregistered
  * calls are calls that do not contain consumer project identity.
  * (Example: calls that do not contain an API key).
  * By default, API methods do not allow unregistered calls, and each method call
  * must be identified by a consumer project identity. Use this rule to
  * allow/disallow unregistered calls.
  *
  * Example of an API that wants to allow unregistered calls for entire service.
  *
  *     usage:
  *       rules:
  *       - selector: "*"
  *         allow_unregistered_calls: true
  *
  * Example of a method that wants to allow unregistered calls.
  *
  *     usage:
  *       rules:
  *       - selector: "google.example.library.v1.LibraryService.CreateBook"
  *         allow_unregistered_calls: true
  *
  * @param selector
  *   Selects the methods to which this rule applies. Use '*' to indicate all
  *   methods in all APIs.
  *  
  *   Refer to [selector][google.api.DocumentationRule.selector] for syntax details.
  * @param allowUnregisteredCalls
  *   If true, the selected method allows unregistered calls, e.g. calls
  *   that don't identify any user or application.
  * @param skipServiceControl
  *   If true, the selected method should skip service control and the control
  *   plane features, such as quota and billing, will not be available.
  *   This flag is used by Google Cloud Endpoints to bypass checks for internal
  *   methods, such as service health check methods.
  */
@SerialVersionUID(0L)
final case class UsageRule(
    selector: _root_.scala.Predef.String = "",
    allowUnregisteredCalls: _root_.scala.Boolean = false,
    skipServiceControl: _root_.scala.Boolean = false
    ) extends scalapb.GeneratedMessage with scalapb.Message[UsageRule] with scalapb.lenses.Updatable[UsageRule] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = selector
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = allowUnregisteredCalls
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, __value)
        }
      };
      
      {
        val __value = skipServiceControl
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(3, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = selector
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = allowUnregisteredCalls
        if (__v != false) {
          _output__.writeBool(2, __v)
        }
      };
      {
        val __v = skipServiceControl
        if (__v != false) {
          _output__.writeBool(3, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): com.google.api.UsageRule = {
      var __selector = this.selector
      var __allowUnregisteredCalls = this.allowUnregisteredCalls
      var __skipServiceControl = this.skipServiceControl
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __selector = _input__.readString()
          case 16 =>
            __allowUnregisteredCalls = _input__.readBool()
          case 24 =>
            __skipServiceControl = _input__.readBool()
          case tag => _input__.skipField(tag)
        }
      }
      com.google.api.UsageRule(
          selector = __selector,
          allowUnregisteredCalls = __allowUnregisteredCalls,
          skipServiceControl = __skipServiceControl
      )
    }
    def withSelector(__v: _root_.scala.Predef.String): UsageRule = copy(selector = __v)
    def withAllowUnregisteredCalls(__v: _root_.scala.Boolean): UsageRule = copy(allowUnregisteredCalls = __v)
    def withSkipServiceControl(__v: _root_.scala.Boolean): UsageRule = copy(skipServiceControl = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = selector
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = allowUnregisteredCalls
          if (__t != false) __t else null
        }
        case 3 => {
          val __t = skipServiceControl
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(selector)
        case 2 => _root_.scalapb.descriptors.PBoolean(allowUnregisteredCalls)
        case 3 => _root_.scalapb.descriptors.PBoolean(skipServiceControl)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = com.google.api.UsageRule
}

object UsageRule extends scalapb.GeneratedMessageCompanion[com.google.api.UsageRule] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[com.google.api.UsageRule] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): com.google.api.UsageRule = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    com.google.api.UsageRule(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), false).asInstanceOf[_root_.scala.Boolean],
      __fieldsMap.getOrElse(__fields.get(2), false).asInstanceOf[_root_.scala.Boolean]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[com.google.api.UsageRule] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      com.google.api.UsageRule(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Boolean]).getOrElse(false),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UsageProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UsageProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = com.google.api.UsageRule(
    selector = "",
    allowUnregisteredCalls = false,
    skipServiceControl = false
  )
  implicit class UsageRuleLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, com.google.api.UsageRule]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, com.google.api.UsageRule](_l) {
    def selector: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.selector)((c_, f_) => c_.copy(selector = f_))
    def allowUnregisteredCalls: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.allowUnregisteredCalls)((c_, f_) => c_.copy(allowUnregisteredCalls = f_))
    def skipServiceControl: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.skipServiceControl)((c_, f_) => c_.copy(skipServiceControl = f_))
  }
  final val SELECTOR_FIELD_NUMBER = 1
  final val ALLOW_UNREGISTERED_CALLS_FIELD_NUMBER = 2
  final val SKIP_SERVICE_CONTROL_FIELD_NUMBER = 3
  def of(
    selector: _root_.scala.Predef.String,
    allowUnregisteredCalls: _root_.scala.Boolean,
    skipServiceControl: _root_.scala.Boolean
  ): _root_.com.google.api.UsageRule = _root_.com.google.api.UsageRule(
    selector,
    allowUnregisteredCalls,
    skipServiceControl
  )
}
