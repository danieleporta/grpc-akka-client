
// Generated by Akka gRPC. DO NOT EDIT.
package io.grpc.health.v1


trait Health {
  
  /**
   * If the requested service is unknown, the call will fail with status
   * NOT_FOUND.
   */
  def check(in: io.grpc.health.v1.HealthCheckRequest): scala.concurrent.Future[io.grpc.health.v1.HealthCheckResponse]
  
  /**
   * Performs a watch for the serving status of the requested service.
   * The server will immediately send back a message indicating the current
   * serving status.  It will then subsequently send a new message whenever
   * the service's serving status changes.
   *  If the requested service is unknown when the call is received, the
   * server will send a message setting the serving status to
   * SERVICE_UNKNOWN but will *not* terminate the call.  If at some
   * future point, the serving status of the service becomes known, the
   * server will send a new message with the service's serving status.
   *  If the call terminates with status UNIMPLEMENTED, then clients
   * should assume this method is not supported and should not retry the
   * call.  If the call terminates with any other status (including OK),
   * clients should retry the call with appropriate exponential backoff.
   */
  def watch(in: io.grpc.health.v1.HealthCheckRequest): akka.stream.scaladsl.Source[io.grpc.health.v1.HealthCheckResponse, akka.NotUsed]
  
}

object Health {
  val name = "grpc.health.v1.Health"

  object Serializers {
    import akka.grpc.scaladsl.ScalapbProtobufSerializer
    
    val HealthCheckRequestSerializer = new ScalapbProtobufSerializer(io.grpc.health.v1.HealthCheckRequest.messageCompanion)
    
    val HealthCheckResponseSerializer = new ScalapbProtobufSerializer(io.grpc.health.v1.HealthCheckResponse.messageCompanion)
    
  }
}
