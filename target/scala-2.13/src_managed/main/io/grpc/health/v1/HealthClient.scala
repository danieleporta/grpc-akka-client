
// Generated by Akka gRPC. DO NOT EDIT.
package io.grpc.health.v1

import scala.concurrent.ExecutionContext

import io.grpc.ManagedChannel
import io.grpc.MethodDescriptor

import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.Marshaller
import akka.grpc.internal.NettyClientUtils
import akka.grpc.internal.ClientState

import akka.stream.Materializer

import akka.grpc.scaladsl.SingleResponseRequestBuilder
import akka.grpc.internal.ScalaUnaryRequestBuilder
import akka.grpc.scaladsl.StreamResponseRequestBuilder
import akka.grpc.internal.ScalaServerStreamingRequestBuilder

// Not sealed so users can extend to write their stubs
trait HealthClient extends Health with HealthClientPowerApi with AkkaGrpcClient

object HealthClient {
  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext): HealthClient =
    new DefaultHealthClient(settings)
}

final class DefaultHealthClient(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext) extends HealthClient {
  import DefaultHealthClient._

  private val options = NettyClientUtils.callOptions(settings)
  private val clientState = new ClientState(settings)

  
    private def checkRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(checkDescriptor, channel, options, settings)
      
    }
  
    private def watchRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        val fqName = "grpc.health.v1.Health.Watch"
        
          new ScalaServerStreamingRequestBuilder(watchDescriptor, fqName, channel, options, settings)
        
      
    }
  

  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer check(io.grpc.health.v1.HealthCheckRequest) if possible.
     */
    
      override def check(): SingleResponseRequestBuilder[io.grpc.health.v1.HealthCheckRequest, io.grpc.health.v1.HealthCheckResponse] =
        clientState.withChannel(checkRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of check
     */
    def check(in: io.grpc.health.v1.HealthCheckRequest): scala.concurrent.Future[io.grpc.health.v1.HealthCheckResponse] =
      check().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer watch(io.grpc.health.v1.HealthCheckRequest) if possible.
     */
    
      override def watch(): StreamResponseRequestBuilder[io.grpc.health.v1.HealthCheckRequest, io.grpc.health.v1.HealthCheckResponse] =
        clientState.withChannel(watchRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of watch
     */
    def watch(in: io.grpc.health.v1.HealthCheckRequest): akka.stream.scaladsl.Source[io.grpc.health.v1.HealthCheckResponse, akka.NotUsed] =
      watch().invoke(in)
  

  override def close(): scala.concurrent.Future[akka.Done] = clientState.close()
  override def closed(): scala.concurrent.Future[akka.Done] = clientState.closed()

}



private object DefaultHealthClient {

  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext): HealthClient =
    new DefaultHealthClient(settings)

  import Health.Serializers._

  
    private val checkDescriptor: MethodDescriptor[io.grpc.health.v1.HealthCheckRequest, io.grpc.health.v1.HealthCheckResponse] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.health.v1.Health", "Check"))
        .setRequestMarshaller(new Marshaller(HealthCheckRequestSerializer))
        .setResponseMarshaller(new Marshaller(HealthCheckResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val watchDescriptor: MethodDescriptor[io.grpc.health.v1.HealthCheckRequest, io.grpc.health.v1.HealthCheckResponse] =
      MethodDescriptor.newBuilder()
        .setType(
  
  
   MethodDescriptor.MethodType.SERVER_STREAMING 
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.health.v1.Health", "Watch"))
        .setRequestMarshaller(new Marshaller(HealthCheckRequestSerializer))
        .setResponseMarshaller(new Marshaller(HealthCheckResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
}

trait HealthClientPowerApi {
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer check(io.grpc.health.v1.HealthCheckRequest) if possible.
     */
    
      def check(): SingleResponseRequestBuilder[io.grpc.health.v1.HealthCheckRequest, io.grpc.health.v1.HealthCheckResponse] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer watch(io.grpc.health.v1.HealthCheckRequest) if possible.
     */
    
      def watch(): StreamResponseRequestBuilder[io.grpc.health.v1.HealthCheckRequest, io.grpc.health.v1.HealthCheckResponse] = ???
    
  

}
