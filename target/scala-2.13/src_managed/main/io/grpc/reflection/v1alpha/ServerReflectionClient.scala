
// Generated by Akka gRPC. DO NOT EDIT.
package io.grpc.reflection.v1alpha

import scala.concurrent.ExecutionContext

import io.grpc.ManagedChannel
import io.grpc.MethodDescriptor

import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.Marshaller
import akka.grpc.internal.NettyClientUtils
import akka.grpc.internal.ClientState

import akka.stream.Materializer

import akka.grpc.scaladsl.StreamResponseRequestBuilder
import akka.grpc.internal.ScalaBidirectionalStreamingRequestBuilder

// Not sealed so users can extend to write their stubs
trait ServerReflectionClient extends ServerReflection with ServerReflectionClientPowerApi with AkkaGrpcClient

object ServerReflectionClient {
  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext): ServerReflectionClient =
    new DefaultServerReflectionClient(settings)
}

final class DefaultServerReflectionClient(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext) extends ServerReflectionClient {
  import DefaultServerReflectionClient._

  private val options = NettyClientUtils.callOptions(settings)
  private val clientState = new ClientState(settings)

  
    private def serverReflectionInfoRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        val fqName = "grpc.reflection.v1alpha.ServerReflection.ServerReflectionInfo"
        
          new ScalaBidirectionalStreamingRequestBuilder(serverReflectionInfoDescriptor, fqName, channel, options, settings)
        
      
    }
  

  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer serverReflectionInfo(akka.stream.scaladsl.Source[io.grpc.reflection.v1alpha.ServerReflectionRequest, akka.NotUsed]) if possible.
     */
    
      override def serverReflectionInfo(): StreamResponseRequestBuilder[akka.stream.scaladsl.Source[io.grpc.reflection.v1alpha.ServerReflectionRequest, akka.NotUsed], io.grpc.reflection.v1alpha.ServerReflectionResponse] =
        clientState.withChannel(serverReflectionInfoRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of serverReflectionInfo
     */
    def serverReflectionInfo(in: akka.stream.scaladsl.Source[io.grpc.reflection.v1alpha.ServerReflectionRequest, akka.NotUsed]): akka.stream.scaladsl.Source[io.grpc.reflection.v1alpha.ServerReflectionResponse, akka.NotUsed] =
      serverReflectionInfo().invoke(in)
  

  override def close(): scala.concurrent.Future[akka.Done] = clientState.close()
  override def closed(): scala.concurrent.Future[akka.Done] = clientState.closed()

}



private object DefaultServerReflectionClient {

  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext): ServerReflectionClient =
    new DefaultServerReflectionClient(settings)

  import ServerReflection.Serializers._

  
    private val serverReflectionInfoDescriptor: MethodDescriptor[io.grpc.reflection.v1alpha.ServerReflectionRequest, io.grpc.reflection.v1alpha.ServerReflectionResponse] =
      MethodDescriptor.newBuilder()
        .setType(
  
  
  
  MethodDescriptor.MethodType.BIDI_STREAMING 
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.reflection.v1alpha.ServerReflection", "ServerReflectionInfo"))
        .setRequestMarshaller(new Marshaller(ServerReflectionRequestSerializer))
        .setResponseMarshaller(new Marshaller(ServerReflectionResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
}

trait ServerReflectionClientPowerApi {
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer serverReflectionInfo(akka.stream.scaladsl.Source[io.grpc.reflection.v1alpha.ServerReflectionRequest, akka.NotUsed]) if possible.
     */
    
      def serverReflectionInfo(): StreamResponseRequestBuilder[akka.stream.scaladsl.Source[io.grpc.reflection.v1alpha.ServerReflectionRequest, akka.NotUsed], io.grpc.reflection.v1alpha.ServerReflectionResponse] = ???
    
  

}
