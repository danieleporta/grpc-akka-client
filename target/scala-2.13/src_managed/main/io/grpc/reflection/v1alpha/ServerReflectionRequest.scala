// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.grpc.reflection.v1alpha

/** The message sent by the client when calling ServerReflectionInfo method.
  */
@SerialVersionUID(0L)
final case class ServerReflectionRequest(
    host: _root_.scala.Predef.String = "",
    messageRequest: io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest = io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ServerReflectionRequest] with scalapb.lenses.Updatable[ServerReflectionRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = host
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if (messageRequest.fileByFilename.isDefined) {
        val __value = messageRequest.fileByFilename.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
      };
      if (messageRequest.fileContainingSymbol.isDefined) {
        val __value = messageRequest.fileContainingSymbol.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(4, __value)
      };
      if (messageRequest.fileContainingExtension.isDefined) {
        val __value = messageRequest.fileContainingExtension.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (messageRequest.allExtensionNumbersOfType.isDefined) {
        val __value = messageRequest.allExtensionNumbersOfType.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
      };
      if (messageRequest.listServices.isDefined) {
        val __value = messageRequest.listServices.get
        __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(7, __value)
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = host
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      messageRequest.fileByFilename.foreach { __v =>
        val __m = __v
        _output__.writeString(3, __m)
      };
      messageRequest.fileContainingSymbol.foreach { __v =>
        val __m = __v
        _output__.writeString(4, __m)
      };
      messageRequest.fileContainingExtension.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      messageRequest.allExtensionNumbersOfType.foreach { __v =>
        val __m = __v
        _output__.writeString(6, __m)
      };
      messageRequest.listServices.foreach { __v =>
        val __m = __v
        _output__.writeString(7, __m)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.grpc.reflection.v1alpha.ServerReflectionRequest = {
      var __host = this.host
      var __messageRequest = this.messageRequest
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __host = _input__.readString()
          case 26 =>
            __messageRequest = io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.FileByFilename(_input__.readString())
          case 34 =>
            __messageRequest = io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.FileContainingSymbol(_input__.readString())
          case 42 =>
            __messageRequest = io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.FileContainingExtension(_root_.scalapb.LiteParser.readMessage(_input__, messageRequest.fileContainingExtension.getOrElse(io.grpc.reflection.v1alpha.ExtensionRequest.defaultInstance)))
          case 50 =>
            __messageRequest = io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.AllExtensionNumbersOfType(_input__.readString())
          case 58 =>
            __messageRequest = io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.ListServices(_input__.readString())
          case tag => _input__.skipField(tag)
        }
      }
      io.grpc.reflection.v1alpha.ServerReflectionRequest(
          host = __host,
          messageRequest = __messageRequest
      )
    }
    def withHost(__v: _root_.scala.Predef.String): ServerReflectionRequest = copy(host = __v)
    def getFileByFilename: _root_.scala.Predef.String = messageRequest.fileByFilename.getOrElse("")
    def withFileByFilename(__v: _root_.scala.Predef.String): ServerReflectionRequest = copy(messageRequest = io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.FileByFilename(__v))
    def getFileContainingSymbol: _root_.scala.Predef.String = messageRequest.fileContainingSymbol.getOrElse("")
    def withFileContainingSymbol(__v: _root_.scala.Predef.String): ServerReflectionRequest = copy(messageRequest = io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.FileContainingSymbol(__v))
    def getFileContainingExtension: io.grpc.reflection.v1alpha.ExtensionRequest = messageRequest.fileContainingExtension.getOrElse(io.grpc.reflection.v1alpha.ExtensionRequest.defaultInstance)
    def withFileContainingExtension(__v: io.grpc.reflection.v1alpha.ExtensionRequest): ServerReflectionRequest = copy(messageRequest = io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.FileContainingExtension(__v))
    def getAllExtensionNumbersOfType: _root_.scala.Predef.String = messageRequest.allExtensionNumbersOfType.getOrElse("")
    def withAllExtensionNumbersOfType(__v: _root_.scala.Predef.String): ServerReflectionRequest = copy(messageRequest = io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.AllExtensionNumbersOfType(__v))
    def getListServices: _root_.scala.Predef.String = messageRequest.listServices.getOrElse("")
    def withListServices(__v: _root_.scala.Predef.String): ServerReflectionRequest = copy(messageRequest = io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.ListServices(__v))
    def clearMessageRequest: ServerReflectionRequest = copy(messageRequest = io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.Empty)
    def withMessageRequest(__v: io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest): ServerReflectionRequest = copy(messageRequest = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = host
          if (__t != "") __t else null
        }
        case 3 => messageRequest.fileByFilename.orNull
        case 4 => messageRequest.fileContainingSymbol.orNull
        case 5 => messageRequest.fileContainingExtension.orNull
        case 6 => messageRequest.allExtensionNumbersOfType.orNull
        case 7 => messageRequest.listServices.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(host)
        case 3 => messageRequest.fileByFilename.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => messageRequest.fileContainingSymbol.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => messageRequest.fileContainingExtension.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => messageRequest.allExtensionNumbersOfType.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 7 => messageRequest.listServices.map(_root_.scalapb.descriptors.PString).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.grpc.reflection.v1alpha.ServerReflectionRequest
}

object ServerReflectionRequest extends scalapb.GeneratedMessageCompanion[io.grpc.reflection.v1alpha.ServerReflectionRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.grpc.reflection.v1alpha.ServerReflectionRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.grpc.reflection.v1alpha.ServerReflectionRequest = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    io.grpc.reflection.v1alpha.ServerReflectionRequest(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      messageRequest = __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[_root_.scala.Predef.String]].map(io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.FileByFilename)
    .orElse[io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest](__fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[_root_.scala.Predef.String]].map(io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.FileContainingSymbol))
    .orElse[io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest](__fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[io.grpc.reflection.v1alpha.ExtensionRequest]].map(io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.FileContainingExtension))
    .orElse[io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest](__fieldsMap.get(__fields.get(4)).asInstanceOf[_root_.scala.Option[_root_.scala.Predef.String]].map(io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.AllExtensionNumbersOfType))
    .orElse[io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest](__fieldsMap.get(__fields.get(5)).asInstanceOf[_root_.scala.Option[_root_.scala.Predef.String]].map(io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.ListServices))
    .getOrElse(io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.grpc.reflection.v1alpha.ServerReflectionRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      io.grpc.reflection.v1alpha.ServerReflectionRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        messageRequest = __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.FileByFilename)
    .orElse[io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest](__fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.FileContainingSymbol))
    .orElse[io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[io.grpc.reflection.v1alpha.ExtensionRequest]]).map(io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.FileContainingExtension))
    .orElse[io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest](__fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.AllExtensionNumbersOfType))
    .orElse[io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest](__fieldsMap.get(scalaDescriptor.findFieldByNumber(7).get).flatMap(_.as[_root_.scala.Option[_root_.scala.Predef.String]]).map(io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.ListServices))
    .getOrElse(io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ReflectionProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ReflectionProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 5 => __out = io.grpc.reflection.v1alpha.ExtensionRequest
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.grpc.reflection.v1alpha.ServerReflectionRequest(
    host = "",
    messageRequest = io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.Empty
  )
  sealed trait MessageRequest extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isFileByFilename: _root_.scala.Boolean = false
    def isFileContainingSymbol: _root_.scala.Boolean = false
    def isFileContainingExtension: _root_.scala.Boolean = false
    def isAllExtensionNumbersOfType: _root_.scala.Boolean = false
    def isListServices: _root_.scala.Boolean = false
    def fileByFilename: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    def fileContainingSymbol: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    def fileContainingExtension: _root_.scala.Option[io.grpc.reflection.v1alpha.ExtensionRequest] = _root_.scala.None
    def allExtensionNumbersOfType: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
    def listServices: _root_.scala.Option[_root_.scala.Predef.String] = _root_.scala.None
  }
  object MessageRequest extends {
    @SerialVersionUID(0L)
    case object Empty extends io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class FileByFilename(value: _root_.scala.Predef.String) extends io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest {
      type ValueType = _root_.scala.Predef.String
      override def isFileByFilename: _root_.scala.Boolean = true
      override def fileByFilename: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 3
    }
    @SerialVersionUID(0L)
    final case class FileContainingSymbol(value: _root_.scala.Predef.String) extends io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest {
      type ValueType = _root_.scala.Predef.String
      override def isFileContainingSymbol: _root_.scala.Boolean = true
      override def fileContainingSymbol: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class FileContainingExtension(value: io.grpc.reflection.v1alpha.ExtensionRequest) extends io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest {
      type ValueType = io.grpc.reflection.v1alpha.ExtensionRequest
      override def isFileContainingExtension: _root_.scala.Boolean = true
      override def fileContainingExtension: _root_.scala.Option[io.grpc.reflection.v1alpha.ExtensionRequest] = Some(value)
      override def number: _root_.scala.Int = 5
    }
    @SerialVersionUID(0L)
    final case class AllExtensionNumbersOfType(value: _root_.scala.Predef.String) extends io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest {
      type ValueType = _root_.scala.Predef.String
      override def isAllExtensionNumbersOfType: _root_.scala.Boolean = true
      override def allExtensionNumbersOfType: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 6
    }
    @SerialVersionUID(0L)
    final case class ListServices(value: _root_.scala.Predef.String) extends io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest {
      type ValueType = _root_.scala.Predef.String
      override def isListServices: _root_.scala.Boolean = true
      override def listServices: _root_.scala.Option[_root_.scala.Predef.String] = Some(value)
      override def number: _root_.scala.Int = 7
    }
  }
  implicit class ServerReflectionRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.reflection.v1alpha.ServerReflectionRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.grpc.reflection.v1alpha.ServerReflectionRequest](_l) {
    def host: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.host)((c_, f_) => c_.copy(host = f_))
    def fileByFilename: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getFileByFilename)((c_, f_) => c_.copy(messageRequest = io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.FileByFilename(f_)))
    def fileContainingSymbol: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getFileContainingSymbol)((c_, f_) => c_.copy(messageRequest = io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.FileContainingSymbol(f_)))
    def fileContainingExtension: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.reflection.v1alpha.ExtensionRequest] = field(_.getFileContainingExtension)((c_, f_) => c_.copy(messageRequest = io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.FileContainingExtension(f_)))
    def allExtensionNumbersOfType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getAllExtensionNumbersOfType)((c_, f_) => c_.copy(messageRequest = io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.AllExtensionNumbersOfType(f_)))
    def listServices: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.getListServices)((c_, f_) => c_.copy(messageRequest = io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest.ListServices(f_)))
    def messageRequest: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest] = field(_.messageRequest)((c_, f_) => c_.copy(messageRequest = f_))
  }
  final val HOST_FIELD_NUMBER = 1
  final val FILE_BY_FILENAME_FIELD_NUMBER = 3
  final val FILE_CONTAINING_SYMBOL_FIELD_NUMBER = 4
  final val FILE_CONTAINING_EXTENSION_FIELD_NUMBER = 5
  final val ALL_EXTENSION_NUMBERS_OF_TYPE_FIELD_NUMBER = 6
  final val LIST_SERVICES_FIELD_NUMBER = 7
  def of(
    host: _root_.scala.Predef.String,
    messageRequest: io.grpc.reflection.v1alpha.ServerReflectionRequest.MessageRequest
  ): _root_.io.grpc.reflection.v1alpha.ServerReflectionRequest = _root_.io.grpc.reflection.v1alpha.ServerReflectionRequest(
    host,
    messageRequest
  )
}
