// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.grpc.reflection.v1alpha

/** A list of ServiceResponse sent by the server answering list_services request.
  *
  * @param service
  *   The information of each service may be expanded in the future, so we use
  *   ServiceResponse message to encapsulate it.
  */
@SerialVersionUID(0L)
final case class ListServiceResponse(
    service: _root_.scala.Seq[io.grpc.reflection.v1alpha.ServiceResponse] = _root_.scala.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ListServiceResponse] with scalapb.lenses.Updatable[ListServiceResponse] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      service.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      service.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.grpc.reflection.v1alpha.ListServiceResponse = {
      val __service = (_root_.scala.collection.immutable.Vector.newBuilder[io.grpc.reflection.v1alpha.ServiceResponse] ++= this.service)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __service += _root_.scalapb.LiteParser.readMessage(_input__, io.grpc.reflection.v1alpha.ServiceResponse.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      io.grpc.reflection.v1alpha.ListServiceResponse(
          service = __service.result()
      )
    }
    def clearService = copy(service = _root_.scala.Seq.empty)
    def addService(__vs: io.grpc.reflection.v1alpha.ServiceResponse*): ListServiceResponse = addAllService(__vs)
    def addAllService(__vs: Iterable[io.grpc.reflection.v1alpha.ServiceResponse]): ListServiceResponse = copy(service = service ++ __vs)
    def withService(__v: _root_.scala.Seq[io.grpc.reflection.v1alpha.ServiceResponse]): ListServiceResponse = copy(service = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => service
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(service.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.grpc.reflection.v1alpha.ListServiceResponse
}

object ListServiceResponse extends scalapb.GeneratedMessageCompanion[io.grpc.reflection.v1alpha.ListServiceResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.grpc.reflection.v1alpha.ListServiceResponse] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.grpc.reflection.v1alpha.ListServiceResponse = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    io.grpc.reflection.v1alpha.ListServiceResponse(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.Seq[io.grpc.reflection.v1alpha.ServiceResponse]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.grpc.reflection.v1alpha.ListServiceResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      io.grpc.reflection.v1alpha.ListServiceResponse(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[io.grpc.reflection.v1alpha.ServiceResponse]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ReflectionProto.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ReflectionProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.grpc.reflection.v1alpha.ServiceResponse
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.grpc.reflection.v1alpha.ListServiceResponse(
    service = _root_.scala.Seq.empty
  )
  implicit class ListServiceResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.reflection.v1alpha.ListServiceResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.grpc.reflection.v1alpha.ListServiceResponse](_l) {
    def service: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.grpc.reflection.v1alpha.ServiceResponse]] = field(_.service)((c_, f_) => c_.copy(service = f_))
  }
  final val SERVICE_FIELD_NUMBER = 1
  def of(
    service: _root_.scala.Seq[io.grpc.reflection.v1alpha.ServiceResponse]
  ): _root_.io.grpc.reflection.v1alpha.ListServiceResponse = _root_.io.grpc.reflection.v1alpha.ListServiceResponse(
    service
  )
}
