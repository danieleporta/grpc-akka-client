// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.grpc.reflection.v1alpha

/** The type name and extension number sent by the client when requesting
  * file_containing_extension.
  *
  * @param containingType
  *   Fully-qualified type name. The format should be &lt;package&gt;.&lt;type&gt;
  */
@SerialVersionUID(0L)
final case class ExtensionRequest(
    containingType: _root_.scala.Predef.String = "",
    extensionNumber: _root_.scala.Int = 0
    ) extends scalapb.GeneratedMessage with scalapb.Message[ExtensionRequest] with scalapb.lenses.Updatable[ExtensionRequest] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = containingType
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = extensionNumber
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = containingType
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = extensionNumber
        if (__v != 0) {
          _output__.writeInt32(2, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.grpc.reflection.v1alpha.ExtensionRequest = {
      var __containingType = this.containingType
      var __extensionNumber = this.extensionNumber
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __containingType = _input__.readString()
          case 16 =>
            __extensionNumber = _input__.readInt32()
          case tag => _input__.skipField(tag)
        }
      }
      io.grpc.reflection.v1alpha.ExtensionRequest(
          containingType = __containingType,
          extensionNumber = __extensionNumber
      )
    }
    def withContainingType(__v: _root_.scala.Predef.String): ExtensionRequest = copy(containingType = __v)
    def withExtensionNumber(__v: _root_.scala.Int): ExtensionRequest = copy(extensionNumber = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = containingType
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = extensionNumber
          if (__t != 0) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(containingType)
        case 2 => _root_.scalapb.descriptors.PInt(extensionNumber)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.grpc.reflection.v1alpha.ExtensionRequest
}

object ExtensionRequest extends scalapb.GeneratedMessageCompanion[io.grpc.reflection.v1alpha.ExtensionRequest] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.grpc.reflection.v1alpha.ExtensionRequest] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.grpc.reflection.v1alpha.ExtensionRequest = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    io.grpc.reflection.v1alpha.ExtensionRequest(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[_root_.scala.Int]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.grpc.reflection.v1alpha.ExtensionRequest] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      io.grpc.reflection.v1alpha.ExtensionRequest(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ReflectionProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ReflectionProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.grpc.reflection.v1alpha.ExtensionRequest(
    containingType = "",
    extensionNumber = 0
  )
  implicit class ExtensionRequestLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.reflection.v1alpha.ExtensionRequest]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.grpc.reflection.v1alpha.ExtensionRequest](_l) {
    def containingType: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.containingType)((c_, f_) => c_.copy(containingType = f_))
    def extensionNumber: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.extensionNumber)((c_, f_) => c_.copy(extensionNumber = f_))
  }
  final val CONTAINING_TYPE_FIELD_NUMBER = 1
  final val EXTENSION_NUMBER_FIELD_NUMBER = 2
  def of(
    containingType: _root_.scala.Predef.String,
    extensionNumber: _root_.scala.Int
  ): _root_.io.grpc.reflection.v1alpha.ExtensionRequest = _root_.io.grpc.reflection.v1alpha.ExtensionRequest(
    containingType,
    extensionNumber
  )
}
