// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.grpc.reflection.v1alpha

/** A list of extension numbers sent by the server answering
  * all_extension_numbers_of_type request.
  *
  * @param baseTypeName
  *   Full name of the base type, including the package name. The format
  *   is &lt;package&gt;.&lt;type&gt;
  */
@SerialVersionUID(0L)
final case class ExtensionNumberResponse(
    baseTypeName: _root_.scala.Predef.String = "",
    extensionNumber: _root_.scala.Seq[_root_.scala.Int] = _root_.scala.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ExtensionNumberResponse] with scalapb.lenses.Updatable[ExtensionNumberResponse] {
    private[this] def extensionNumberSerializedSize = {
      if (__extensionNumberSerializedSizeField == 0) __extensionNumberSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        extensionNumber.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(__i))
        __s
      }
      __extensionNumberSerializedSizeField
    }
    @transient private[this] var __extensionNumberSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = baseTypeName
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      if(extensionNumber.nonEmpty) {
        val __localsize = extensionNumberSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = baseTypeName
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      if (extensionNumber.nonEmpty) {
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(extensionNumberSerializedSize)
        extensionNumber.foreach(_output__.writeInt32NoTag)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.grpc.reflection.v1alpha.ExtensionNumberResponse = {
      var __baseTypeName = this.baseTypeName
      val __extensionNumber = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Int] ++= this.extensionNumber)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __baseTypeName = _input__.readString()
          case 16 =>
            __extensionNumber += _input__.readInt32()
          case 18 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __extensionNumber += _input__.readInt32
            }
            _input__.popLimit(oldLimit)
          }
          case tag => _input__.skipField(tag)
        }
      }
      io.grpc.reflection.v1alpha.ExtensionNumberResponse(
          baseTypeName = __baseTypeName,
          extensionNumber = __extensionNumber.result()
      )
    }
    def withBaseTypeName(__v: _root_.scala.Predef.String): ExtensionNumberResponse = copy(baseTypeName = __v)
    def clearExtensionNumber = copy(extensionNumber = _root_.scala.Seq.empty)
    def addExtensionNumber(__vs: _root_.scala.Int*): ExtensionNumberResponse = addAllExtensionNumber(__vs)
    def addAllExtensionNumber(__vs: Iterable[_root_.scala.Int]): ExtensionNumberResponse = copy(extensionNumber = extensionNumber ++ __vs)
    def withExtensionNumber(__v: _root_.scala.Seq[_root_.scala.Int]): ExtensionNumberResponse = copy(extensionNumber = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = baseTypeName
          if (__t != "") __t else null
        }
        case 2 => extensionNumber
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(baseTypeName)
        case 2 => _root_.scalapb.descriptors.PRepeated(extensionNumber.iterator.map(_root_.scalapb.descriptors.PInt).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.grpc.reflection.v1alpha.ExtensionNumberResponse
}

object ExtensionNumberResponse extends scalapb.GeneratedMessageCompanion[io.grpc.reflection.v1alpha.ExtensionNumberResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.grpc.reflection.v1alpha.ExtensionNumberResponse] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.grpc.reflection.v1alpha.ExtensionNumberResponse = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    io.grpc.reflection.v1alpha.ExtensionNumberResponse(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(1), Nil).asInstanceOf[_root_.scala.Seq[_root_.scala.Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.grpc.reflection.v1alpha.ExtensionNumberResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      io.grpc.reflection.v1alpha.ExtensionNumberResponse(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ReflectionProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ReflectionProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.grpc.reflection.v1alpha.ExtensionNumberResponse(
    baseTypeName = "",
    extensionNumber = _root_.scala.Seq.empty
  )
  implicit class ExtensionNumberResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.reflection.v1alpha.ExtensionNumberResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.grpc.reflection.v1alpha.ExtensionNumberResponse](_l) {
    def baseTypeName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.baseTypeName)((c_, f_) => c_.copy(baseTypeName = f_))
    def extensionNumber: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[_root_.scala.Int]] = field(_.extensionNumber)((c_, f_) => c_.copy(extensionNumber = f_))
  }
  final val BASE_TYPE_NAME_FIELD_NUMBER = 1
  final val EXTENSION_NUMBER_FIELD_NUMBER = 2
  def of(
    baseTypeName: _root_.scala.Predef.String,
    extensionNumber: _root_.scala.Seq[_root_.scala.Int]
  ): _root_.io.grpc.reflection.v1alpha.ExtensionNumberResponse = _root_.io.grpc.reflection.v1alpha.ExtensionNumberResponse(
    baseTypeName,
    extensionNumber
  )
}
