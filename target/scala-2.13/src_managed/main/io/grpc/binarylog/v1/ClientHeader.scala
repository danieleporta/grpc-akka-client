// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.grpc.binarylog.v1

/** @param metadata
  *   This contains only the metadata from the application.
  * @param methodName
  *   The name of the RPC method, which looks something like:
  *   /&lt;service&gt;/&lt;method&gt;
  *   Note the leading "/" character.
  * @param authority
  *   A single process may be used to run multiple virtual
  *   servers with different identities.
  *   The authority is the name of such a server identitiy.
  *   It is typically a portion of the URI in the form of
  *   &lt;host&gt; or &lt;host&gt;:&lt;port&gt; .
  * @param timeout
  *   the RPC timeout
  */
@SerialVersionUID(0L)
final case class ClientHeader(
    metadata: _root_.scala.Option[io.grpc.binarylog.v1.Metadata] = _root_.scala.None,
    methodName: _root_.scala.Predef.String = "",
    authority: _root_.scala.Predef.String = "",
    timeout: _root_.scala.Option[com.google.protobuf.duration.Duration] = _root_.scala.None
    ) extends scalapb.GeneratedMessage with scalapb.Message[ClientHeader] with scalapb.lenses.Updatable[ClientHeader] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (metadata.isDefined) {
        val __value = metadata.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = methodName
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(2, __value)
        }
      };
      
      {
        val __value = authority
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      if (timeout.isDefined) {
        val __value = timeout.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      metadata.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = methodName
        if (__v != "") {
          _output__.writeString(2, __v)
        }
      };
      {
        val __v = authority
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      timeout.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.grpc.binarylog.v1.ClientHeader = {
      var __metadata = this.metadata
      var __methodName = this.methodName
      var __authority = this.authority
      var __timeout = this.timeout
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __metadata = Option(_root_.scalapb.LiteParser.readMessage(_input__, __metadata.getOrElse(io.grpc.binarylog.v1.Metadata.defaultInstance)))
          case 18 =>
            __methodName = _input__.readString()
          case 26 =>
            __authority = _input__.readString()
          case 34 =>
            __timeout = Option(_root_.scalapb.LiteParser.readMessage(_input__, __timeout.getOrElse(com.google.protobuf.duration.Duration.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      io.grpc.binarylog.v1.ClientHeader(
          metadata = __metadata,
          methodName = __methodName,
          authority = __authority,
          timeout = __timeout
      )
    }
    def getMetadata: io.grpc.binarylog.v1.Metadata = metadata.getOrElse(io.grpc.binarylog.v1.Metadata.defaultInstance)
    def clearMetadata: ClientHeader = copy(metadata = _root_.scala.None)
    def withMetadata(__v: io.grpc.binarylog.v1.Metadata): ClientHeader = copy(metadata = Option(__v))
    def withMethodName(__v: _root_.scala.Predef.String): ClientHeader = copy(methodName = __v)
    def withAuthority(__v: _root_.scala.Predef.String): ClientHeader = copy(authority = __v)
    def getTimeout: com.google.protobuf.duration.Duration = timeout.getOrElse(com.google.protobuf.duration.Duration.defaultInstance)
    def clearTimeout: ClientHeader = copy(timeout = _root_.scala.None)
    def withTimeout(__v: com.google.protobuf.duration.Duration): ClientHeader = copy(timeout = Option(__v))
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => metadata.orNull
        case 2 => {
          val __t = methodName
          if (__t != "") __t else null
        }
        case 3 => {
          val __t = authority
          if (__t != "") __t else null
        }
        case 4 => timeout.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => metadata.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PString(methodName)
        case 3 => _root_.scalapb.descriptors.PString(authority)
        case 4 => timeout.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.grpc.binarylog.v1.ClientHeader
}

object ClientHeader extends scalapb.GeneratedMessageCompanion[io.grpc.binarylog.v1.ClientHeader] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.grpc.binarylog.v1.ClientHeader] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.grpc.binarylog.v1.ClientHeader = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    io.grpc.binarylog.v1.ClientHeader(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[io.grpc.binarylog.v1.Metadata]],
      __fieldsMap.getOrElse(__fields.get(1), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[com.google.protobuf.duration.Duration]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.grpc.binarylog.v1.ClientHeader] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      io.grpc.binarylog.v1.ClientHeader(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.grpc.binarylog.v1.Metadata]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.duration.Duration]])
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = BinarylogProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = BinarylogProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.grpc.binarylog.v1.Metadata
      case 4 => __out = com.google.protobuf.duration.Duration
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.grpc.binarylog.v1.ClientHeader(
    metadata = _root_.scala.None,
    methodName = "",
    authority = "",
    timeout = _root_.scala.None
  )
  implicit class ClientHeaderLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.binarylog.v1.ClientHeader]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.grpc.binarylog.v1.ClientHeader](_l) {
    def metadata: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.binarylog.v1.Metadata] = field(_.getMetadata)((c_, f_) => c_.copy(metadata = Option(f_)))
    def optionalMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.grpc.binarylog.v1.Metadata]] = field(_.metadata)((c_, f_) => c_.copy(metadata = f_))
    def methodName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.methodName)((c_, f_) => c_.copy(methodName = f_))
    def authority: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.authority)((c_, f_) => c_.copy(authority = f_))
    def timeout: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.duration.Duration] = field(_.getTimeout)((c_, f_) => c_.copy(timeout = Option(f_)))
    def optionalTimeout: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.duration.Duration]] = field(_.timeout)((c_, f_) => c_.copy(timeout = f_))
  }
  final val METADATA_FIELD_NUMBER = 1
  final val METHOD_NAME_FIELD_NUMBER = 2
  final val AUTHORITY_FIELD_NUMBER = 3
  final val TIMEOUT_FIELD_NUMBER = 4
  def of(
    metadata: _root_.scala.Option[io.grpc.binarylog.v1.Metadata],
    methodName: _root_.scala.Predef.String,
    authority: _root_.scala.Predef.String,
    timeout: _root_.scala.Option[com.google.protobuf.duration.Duration]
  ): _root_.io.grpc.binarylog.v1.ClientHeader = _root_.io.grpc.binarylog.v1.ClientHeader(
    metadata,
    methodName,
    authority,
    timeout
  )
}
