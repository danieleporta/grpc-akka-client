// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.grpc.binarylog.v1

/** @param metadata
  *   This contains only the metadata from the application.
  * @param statusCode
  *   The gRPC status code.
  * @param statusMessage
  *   An original status message before any transport specific
  *   encoding.
  * @param statusDetails
  *   The value of the 'grpc-status-details-bin' metadata key. If
  *   present, this is always an encoded 'google.rpc.Status' message.
  */
@SerialVersionUID(0L)
final case class Trailer(
    metadata: _root_.scala.Option[io.grpc.binarylog.v1.Metadata] = _root_.scala.None,
    statusCode: _root_.scala.Int = 0,
    statusMessage: _root_.scala.Predef.String = "",
    statusDetails: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY
    ) extends scalapb.GeneratedMessage with scalapb.Message[Trailer] with scalapb.lenses.Updatable[Trailer] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (metadata.isDefined) {
        val __value = metadata.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = statusCode
        if (__value != 0) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeUInt32Size(2, __value)
        }
      };
      
      {
        val __value = statusMessage
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(3, __value)
        }
      };
      
      {
        val __value = statusDetails
        if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(4, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      metadata.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = statusCode
        if (__v != 0) {
          _output__.writeUInt32(2, __v)
        }
      };
      {
        val __v = statusMessage
        if (__v != "") {
          _output__.writeString(3, __v)
        }
      };
      {
        val __v = statusDetails
        if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
          _output__.writeBytes(4, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.grpc.binarylog.v1.Trailer = {
      var __metadata = this.metadata
      var __statusCode = this.statusCode
      var __statusMessage = this.statusMessage
      var __statusDetails = this.statusDetails
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __metadata = Option(_root_.scalapb.LiteParser.readMessage(_input__, __metadata.getOrElse(io.grpc.binarylog.v1.Metadata.defaultInstance)))
          case 16 =>
            __statusCode = _input__.readUInt32()
          case 26 =>
            __statusMessage = _input__.readString()
          case 34 =>
            __statusDetails = _input__.readBytes()
          case tag => _input__.skipField(tag)
        }
      }
      io.grpc.binarylog.v1.Trailer(
          metadata = __metadata,
          statusCode = __statusCode,
          statusMessage = __statusMessage,
          statusDetails = __statusDetails
      )
    }
    def getMetadata: io.grpc.binarylog.v1.Metadata = metadata.getOrElse(io.grpc.binarylog.v1.Metadata.defaultInstance)
    def clearMetadata: Trailer = copy(metadata = _root_.scala.None)
    def withMetadata(__v: io.grpc.binarylog.v1.Metadata): Trailer = copy(metadata = Option(__v))
    def withStatusCode(__v: _root_.scala.Int): Trailer = copy(statusCode = __v)
    def withStatusMessage(__v: _root_.scala.Predef.String): Trailer = copy(statusMessage = __v)
    def withStatusDetails(__v: _root_.com.google.protobuf.ByteString): Trailer = copy(statusDetails = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => metadata.orNull
        case 2 => {
          val __t = statusCode
          if (__t != 0) __t else null
        }
        case 3 => {
          val __t = statusMessage
          if (__t != "") __t else null
        }
        case 4 => {
          val __t = statusDetails
          if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => metadata.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => _root_.scalapb.descriptors.PInt(statusCode)
        case 3 => _root_.scalapb.descriptors.PString(statusMessage)
        case 4 => _root_.scalapb.descriptors.PByteString(statusDetails)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.grpc.binarylog.v1.Trailer
}

object Trailer extends scalapb.GeneratedMessageCompanion[io.grpc.binarylog.v1.Trailer] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.grpc.binarylog.v1.Trailer] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.grpc.binarylog.v1.Trailer = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    io.grpc.binarylog.v1.Trailer(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[io.grpc.binarylog.v1.Metadata]],
      __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[_root_.scala.Int],
      __fieldsMap.getOrElse(__fields.get(2), "").asInstanceOf[_root_.scala.Predef.String],
      __fieldsMap.getOrElse(__fields.get(3), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.grpc.binarylog.v1.Trailer] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      io.grpc.binarylog.v1.Trailer(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.grpc.binarylog.v1.Metadata]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = BinarylogProto.javaDescriptor.getMessageTypes.get(3)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = BinarylogProto.scalaDescriptor.messages(3)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.grpc.binarylog.v1.Metadata
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.grpc.binarylog.v1.Trailer(
    metadata = _root_.scala.None,
    statusCode = 0,
    statusMessage = "",
    statusDetails = _root_.com.google.protobuf.ByteString.EMPTY
  )
  implicit class TrailerLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.binarylog.v1.Trailer]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.grpc.binarylog.v1.Trailer](_l) {
    def metadata: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.binarylog.v1.Metadata] = field(_.getMetadata)((c_, f_) => c_.copy(metadata = Option(f_)))
    def optionalMetadata: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.grpc.binarylog.v1.Metadata]] = field(_.metadata)((c_, f_) => c_.copy(metadata = f_))
    def statusCode: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.statusCode)((c_, f_) => c_.copy(statusCode = f_))
    def statusMessage: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.statusMessage)((c_, f_) => c_.copy(statusMessage = f_))
    def statusDetails: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.statusDetails)((c_, f_) => c_.copy(statusDetails = f_))
  }
  final val METADATA_FIELD_NUMBER = 1
  final val STATUS_CODE_FIELD_NUMBER = 2
  final val STATUS_MESSAGE_FIELD_NUMBER = 3
  final val STATUS_DETAILS_FIELD_NUMBER = 4
  def of(
    metadata: _root_.scala.Option[io.grpc.binarylog.v1.Metadata],
    statusCode: _root_.scala.Int,
    statusMessage: _root_.scala.Predef.String,
    statusDetails: _root_.com.google.protobuf.ByteString
  ): _root_.io.grpc.binarylog.v1.Trailer = _root_.io.grpc.binarylog.v1.Trailer(
    metadata,
    statusCode,
    statusMessage,
    statusDetails
  )
}
