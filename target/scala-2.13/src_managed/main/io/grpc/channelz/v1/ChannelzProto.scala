// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.grpc.channelz.v1

object ChannelzProto extends _root_.scalapb.GeneratedFileObject {
  lazy val dependencies: Seq[_root_.scalapb.GeneratedFileObject] = Seq(
    com.google.protobuf.any.AnyProto,
    com.google.protobuf.duration.DurationProto,
    com.google.protobuf.timestamp.TimestampProto,
    com.google.protobuf.wrappers.WrappersProto
  )
  lazy val messagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      io.grpc.channelz.v1.Channel,
      io.grpc.channelz.v1.Subchannel,
      io.grpc.channelz.v1.ChannelConnectivityState,
      io.grpc.channelz.v1.ChannelData,
      io.grpc.channelz.v1.ChannelTraceEvent,
      io.grpc.channelz.v1.ChannelTrace,
      io.grpc.channelz.v1.ChannelRef,
      io.grpc.channelz.v1.SubchannelRef,
      io.grpc.channelz.v1.SocketRef,
      io.grpc.channelz.v1.ServerRef,
      io.grpc.channelz.v1.Server,
      io.grpc.channelz.v1.ServerData,
      io.grpc.channelz.v1.Socket,
      io.grpc.channelz.v1.SocketData,
      io.grpc.channelz.v1.Address,
      io.grpc.channelz.v1.Security,
      io.grpc.channelz.v1.SocketOption,
      io.grpc.channelz.v1.SocketOptionTimeout,
      io.grpc.channelz.v1.SocketOptionLinger,
      io.grpc.channelz.v1.SocketOptionTcpInfo,
      io.grpc.channelz.v1.GetTopChannelsRequest,
      io.grpc.channelz.v1.GetTopChannelsResponse,
      io.grpc.channelz.v1.GetServersRequest,
      io.grpc.channelz.v1.GetServersResponse,
      io.grpc.channelz.v1.GetServerRequest,
      io.grpc.channelz.v1.GetServerResponse,
      io.grpc.channelz.v1.GetServerSocketsRequest,
      io.grpc.channelz.v1.GetServerSocketsResponse,
      io.grpc.channelz.v1.GetChannelRequest,
      io.grpc.channelz.v1.GetChannelResponse,
      io.grpc.channelz.v1.GetSubchannelRequest,
      io.grpc.channelz.v1.GetSubchannelResponse,
      io.grpc.channelz.v1.GetSocketRequest,
      io.grpc.channelz.v1.GetSocketResponse
    )
  private lazy val ProtoBytes: Array[Byte] =
      scalapb.Encoding.fromBase64(scala.collection.immutable.Seq(
  """Ch9ncnBjL2NoYW5uZWx6L3YxL2NoYW5uZWx6LnByb3RvEhBncnBjLmNoYW5uZWx6LnYxGhlnb29nbGUvcHJvdG9idWYvYW55L
  nByb3RvGh5nb29nbGUvcHJvdG9idWYvZHVyYXRpb24ucHJvdG8aH2dvb2dsZS9wcm90b2J1Zi90aW1lc3RhbXAucHJvdG8aHmdvb
  2dsZS9wcm90b2J1Zi93cmFwcGVycy5wcm90byL5AgoHQ2hhbm5lbBI4CgNyZWYYASABKAsyHC5ncnBjLmNoYW5uZWx6LnYxLkNoY
  W5uZWxSZWZCCOI/BRIDcmVmUgNyZWYSPAoEZGF0YRgCIAEoCzIdLmdycGMuY2hhbm5lbHoudjEuQ2hhbm5lbERhdGFCCeI/BhIEZ
  GF0YVIEZGF0YRJOCgtjaGFubmVsX3JlZhgDIAMoCzIcLmdycGMuY2hhbm5lbHoudjEuQ2hhbm5lbFJlZkIP4j8MEgpjaGFubmVsU
  mVmUgpjaGFubmVsUmVmEloKDnN1YmNoYW5uZWxfcmVmGAQgAygLMh8uZ3JwYy5jaGFubmVsei52MS5TdWJjaGFubmVsUmVmQhLiP
  w8SDXN1YmNoYW5uZWxSZWZSDXN1YmNoYW5uZWxSZWYSSgoKc29ja2V0X3JlZhgFIAMoCzIbLmdycGMuY2hhbm5lbHoudjEuU29ja
  2V0UmVmQg7iPwsSCXNvY2tldFJlZlIJc29ja2V0UmVmIv8CCgpTdWJjaGFubmVsEjsKA3JlZhgBIAEoCzIfLmdycGMuY2hhbm5lb
  HoudjEuU3ViY2hhbm5lbFJlZkII4j8FEgNyZWZSA3JlZhI8CgRkYXRhGAIgASgLMh0uZ3JwYy5jaGFubmVsei52MS5DaGFubmVsR
  GF0YUIJ4j8GEgRkYXRhUgRkYXRhEk4KC2NoYW5uZWxfcmVmGAMgAygLMhwuZ3JwYy5jaGFubmVsei52MS5DaGFubmVsUmVmQg/iP
  wwSCmNoYW5uZWxSZWZSCmNoYW5uZWxSZWYSWgoOc3ViY2hhbm5lbF9yZWYYBCADKAsyHy5ncnBjLmNoYW5uZWx6LnYxLlN1YmNoY
  W5uZWxSZWZCEuI/DxINc3ViY2hhbm5lbFJlZlINc3ViY2hhbm5lbFJlZhJKCgpzb2NrZXRfcmVmGAUgAygLMhsuZ3JwYy5jaGFub
  mVsei52MS5Tb2NrZXRSZWZCDuI/CxIJc29ja2V0UmVmUglzb2NrZXRSZWYizgEKGENoYW5uZWxDb25uZWN0aXZpdHlTdGF0ZRJSC
  gVzdGF0ZRgBIAEoDjIwLmdycGMuY2hhbm5lbHoudjEuQ2hhbm5lbENvbm5lY3Rpdml0eVN0YXRlLlN0YXRlQgriPwcSBXN0YXRlU
  gVzdGF0ZSJeCgVTdGF0ZRILCgdVTktOT1dOEAASCAoESURMRRABEg4KCkNPTk5FQ1RJTkcQAhIJCgVSRUFEWRADEhUKEVRSQU5TS
  UVOVF9GQUlMVVJFEAQSDAoIU0hVVERPV04QBSLnAwoLQ2hhbm5lbERhdGESTAoFc3RhdGUYASABKAsyKi5ncnBjLmNoYW5uZWx6L
  nYxLkNoYW5uZWxDb25uZWN0aXZpdHlTdGF0ZUIK4j8HEgVzdGF0ZVIFc3RhdGUSIwoGdGFyZ2V0GAIgASgJQgviPwgSBnRhcmdld
  FIGdGFyZ2V0EkAKBXRyYWNlGAMgASgLMh4uZ3JwYy5jaGFubmVsei52MS5DaGFubmVsVHJhY2VCCuI/BxIFdHJhY2VSBXRyYWNlE
  jYKDWNhbGxzX3N0YXJ0ZWQYBCABKANCEeI/DhIMY2FsbHNTdGFydGVkUgxjYWxsc1N0YXJ0ZWQSPAoPY2FsbHNfc3VjY2VlZGVkG
  AUgASgDQhPiPxASDmNhbGxzU3VjY2VlZGVkUg5jYWxsc1N1Y2NlZWRlZBIzCgxjYWxsc19mYWlsZWQYBiABKANCEOI/DRILY2Fsb
  HNGYWlsZWRSC2NhbGxzRmFpbGVkEngKG2xhc3RfY2FsbF9zdGFydGVkX3RpbWVzdGFtcBgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Z
  i5UaW1lc3RhbXBCHeI/GhIYbGFzdENhbGxTdGFydGVkVGltZXN0YW1wUhhsYXN0Q2FsbFN0YXJ0ZWRUaW1lc3RhbXAi7gMKEUNoY
  W5uZWxUcmFjZUV2ZW50EjIKC2Rlc2NyaXB0aW9uGAEgASgJQhDiPw0SC2Rlc2NyaXB0aW9uUgtkZXNjcmlwdGlvbhJXCghzZXZlc
  ml0eRgCIAEoDjIsLmdycGMuY2hhbm5lbHoudjEuQ2hhbm5lbFRyYWNlRXZlbnQuU2V2ZXJpdHlCDeI/ChIIc2V2ZXJpdHlSCHNld
  mVyaXR5EkgKCXRpbWVzdGFtcBgDIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCDuI/CxIJdGltZXN0YW1wUgl0aW1lc
  3RhbXASUAoLY2hhbm5lbF9yZWYYBCABKAsyHC5ncnBjLmNoYW5uZWx6LnYxLkNoYW5uZWxSZWZCD+I/DBIKY2hhbm5lbFJlZkgAU
  gpjaGFubmVsUmVmElwKDnN1YmNoYW5uZWxfcmVmGAUgASgLMh8uZ3JwYy5jaGFubmVsei52MS5TdWJjaGFubmVsUmVmQhLiPw8SD
  XN1YmNoYW5uZWxSZWZIAFINc3ViY2hhbm5lbFJlZiJFCghTZXZlcml0eRIOCgpDVF9VTktOT1dOEAASCwoHQ1RfSU5GTxABEg4KC
  kNUX1dBUk5JTkcQAhIMCghDVF9FUlJPUhADQgsKCWNoaWxkX3JlZiL9AQoMQ2hhbm5lbFRyYWNlEkAKEW51bV9ldmVudHNfbG9nZ
  2VkGAEgASgDQhTiPxESD251bUV2ZW50c0xvZ2dlZFIPbnVtRXZlbnRzTG9nZ2VkEmEKEmNyZWF0aW9uX3RpbWVzdGFtcBgCIAEoC
  zIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCFuI/ExIRY3JlYXRpb25UaW1lc3RhbXBSEWNyZWF0aW9uVGltZXN0YW1wEkgKB
  mV2ZW50cxgDIAMoCzIjLmdycGMuY2hhbm5lbHoudjEuQ2hhbm5lbFRyYWNlRXZlbnRCC+I/CBIGZXZlbnRzUgZldmVudHMifgoKQ
  2hhbm5lbFJlZhItCgpjaGFubmVsX2lkGAEgASgDQg7iPwsSCWNoYW5uZWxJZFIJY2hhbm5lbElkEh0KBG5hbWUYAiABKAlCCeI/B
  hIEbmFtZVIEbmFtZUoECAMQBEoECAQQBUoECAUQBkoECAYQB0oECAcQCEoECAgQCSKKAQoNU3ViY2hhbm5lbFJlZhI2Cg1zdWJja
  GFubmVsX2lkGAcgASgDQhHiPw4SDHN1YmNoYW5uZWxJZFIMc3ViY2hhbm5lbElkEh0KBG5hbWUYCCABKAlCCeI/BhIEbmFtZVIEb
  mFtZUoECAEQAkoECAIQA0oECAMQBEoECAQQBUoECAUQBkoECAYQByJ6CglTb2NrZXRSZWYSKgoJc29ja2V0X2lkGAMgASgDQg3iP
  woSCHNvY2tldElkUghzb2NrZXRJZBIdCgRuYW1lGAQgASgJQgniPwYSBG5hbWVSBG5hbWVKBAgBEAJKBAgCEANKBAgFEAZKBAgGE
  AdKBAgHEAhKBAgIEAkiegoJU2VydmVyUmVmEioKCXNlcnZlcl9pZBgFIAEoA0IN4j8KEghzZXJ2ZXJJZFIIc2VydmVySWQSHQoEb
  mFtZRgGIAEoCUIJ4j8GEgRuYW1lUgRuYW1lSgQIARACSgQIAhADSgQIAxAESgQIBBAFSgQIBxAISgQICBAJItMBCgZTZXJ2ZXISN
  woDcmVmGAEgASgLMhsuZ3JwYy5jaGFubmVsei52MS5TZXJ2ZXJSZWZCCOI/BRIDcmVmUgNyZWYSOwoEZGF0YRgCIAEoCzIcLmdyc
  GMuY2hhbm5lbHoudjEuU2VydmVyRGF0YUIJ4j8GEgRkYXRhUgRkYXRhElMKDWxpc3Rlbl9zb2NrZXQYAyADKAsyGy5ncnBjLmNoY
  W5uZWx6LnYxLlNvY2tldFJlZkIR4j8OEgxsaXN0ZW5Tb2NrZXRSDGxpc3RlblNvY2tldCLzAgoKU2VydmVyRGF0YRJACgV0cmFjZ
  RgBIAEoCzIeLmdycGMuY2hhbm5lbHoudjEuQ2hhbm5lbFRyYWNlQgriPwcSBXRyYWNlUgV0cmFjZRI2Cg1jYWxsc19zdGFydGVkG
  AIgASgDQhHiPw4SDGNhbGxzU3RhcnRlZFIMY2FsbHNTdGFydGVkEjwKD2NhbGxzX3N1Y2NlZWRlZBgDIAEoA0IT4j8QEg5jYWxsc
  1N1Y2NlZWRlZFIOY2FsbHNTdWNjZWVkZWQSMwoMY2FsbHNfZmFpbGVkGAQgASgDQhDiPw0SC2NhbGxzRmFpbGVkUgtjYWxsc0Zha
  WxlZBJ4ChtsYXN0X2NhbGxfc3RhcnRlZF90aW1lc3RhbXAYBSABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQh3iPxoSG
  Gxhc3RDYWxsU3RhcnRlZFRpbWVzdGFtcFIYbGFzdENhbGxTdGFydGVkVGltZXN0YW1wIvQCCgZTb2NrZXQSNwoDcmVmGAEgASgLM
  hsuZ3JwYy5jaGFubmVsei52MS5Tb2NrZXRSZWZCCOI/BRIDcmVmUgNyZWYSOwoEZGF0YRgCIAEoCzIcLmdycGMuY2hhbm5lbHoud
  jEuU29ja2V0RGF0YUIJ4j8GEgRkYXRhUgRkYXRhEjsKBWxvY2FsGAMgASgLMhkuZ3JwYy5jaGFubmVsei52MS5BZGRyZXNzQgriP
  wcSBWxvY2FsUgVsb2NhbBI+CgZyZW1vdGUYBCABKAsyGS5ncnBjLmNoYW5uZWx6LnYxLkFkZHJlc3NCC+I/CBIGcmVtb3RlUgZyZ
  W1vdGUSRQoIc2VjdXJpdHkYBSABKAsyGi5ncnBjLmNoYW5uZWx6LnYxLlNlY3VyaXR5Qg3iPwoSCHNlY3VyaXR5UghzZWN1cml0e
  RIwCgtyZW1vdGVfbmFtZRgGIAEoCUIP4j8MEgpyZW1vdGVOYW1lUgpyZW1vdGVOYW1lItwJCgpTb2NrZXREYXRhEjwKD3N0cmVhb
  XNfc3RhcnRlZBgBIAEoA0IT4j8QEg5zdHJlYW1zU3RhcnRlZFIOc3RyZWFtc1N0YXJ0ZWQSQgoRc3RyZWFtc19zdWNjZWVkZWQYA
  iABKANCFeI/EhIQc3RyZWFtc1N1Y2NlZWRlZFIQc3RyZWFtc1N1Y2NlZWRlZBI5Cg5zdHJlYW1zX2ZhaWxlZBgDIAEoA0IS4j8PE
  g1zdHJlYW1zRmFpbGVkUg1zdHJlYW1zRmFpbGVkEjYKDW1lc3NhZ2VzX3NlbnQYBCABKANCEeI/DhIMbWVzc2FnZXNTZW50UgxtZ
  XNzYWdlc1NlbnQSQgoRbWVzc2FnZXNfcmVjZWl2ZWQYBSABKANCFeI/EhIQbWVzc2FnZXNSZWNlaXZlZFIQbWVzc2FnZXNSZWNla
  XZlZBI9ChBrZWVwX2FsaXZlc19zZW50GAYgASgDQhPiPxASDmtlZXBBbGl2ZXNTZW50Ug5rZWVwQWxpdmVzU2VudBKOAQojbGFzd
  F9sb2NhbF9zdHJlYW1fY3JlYXRlZF90aW1lc3RhbXAYByABKAsyGi5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQiTiPyESH2xhc
  3RMb2NhbFN0cmVhbUNyZWF0ZWRUaW1lc3RhbXBSH2xhc3RMb2NhbFN0cmVhbUNyZWF0ZWRUaW1lc3RhbXASkQEKJGxhc3RfcmVtb
  3RlX3N0cmVhbV9jcmVhdGVkX3RpbWVzdGFtcBgIIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCJeI/IhIgbGFzdFJlb
  W90ZVN0cmVhbUNyZWF0ZWRUaW1lc3RhbXBSIGxhc3RSZW1vdGVTdHJlYW1DcmVhdGVkVGltZXN0YW1wEngKG2xhc3RfbWVzc2FnZ
  V9zZW50X3RpbWVzdGFtcBgJIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBCHeI/GhIYbGFzdE1lc3NhZ2VTZW50VGltZ
  XN0YW1wUhhsYXN0TWVzc2FnZVNlbnRUaW1lc3RhbXAShAEKH2xhc3RfbWVzc2FnZV9yZWNlaXZlZF90aW1lc3RhbXAYCiABKAsyG
  i5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wQiHiPx4SHGxhc3RNZXNzYWdlUmVjZWl2ZWRUaW1lc3RhbXBSHGxhc3RNZXNzYWdlU
  mVjZWl2ZWRUaW1lc3RhbXAScwoZbG9jYWxfZmxvd19jb250cm9sX3dpbmRvdxgLIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQ2N
  FZhbHVlQhviPxgSFmxvY2FsRmxvd0NvbnRyb2xXaW5kb3dSFmxvY2FsRmxvd0NvbnRyb2xXaW5kb3cSdgoacmVtb3RlX2Zsb3dfY
  29udHJvbF93aW5kb3cYDCABKAsyGy5nb29nbGUucHJvdG9idWYuSW50NjRWYWx1ZUIc4j8ZEhdyZW1vdGVGbG93Q29udHJvbFdpb
  mRvd1IXcmVtb3RlRmxvd0NvbnRyb2xXaW5kb3cSQwoGb3B0aW9uGA0gAygLMh4uZ3JwYy5jaGFubmVsei52MS5Tb2NrZXRPcHRpb
  25CC+I/CBIGb3B0aW9uUgZvcHRpb24isAQKB0FkZHJlc3MSYAoNdGNwaXBfYWRkcmVzcxgBIAEoCzImLmdycGMuY2hhbm5lbHoud
  jEuQWRkcmVzcy5UY3BJcEFkZHJlc3NCEeI/DhIMdGNwaXBBZGRyZXNzSABSDHRjcGlwQWRkcmVzcxJYCgt1ZHNfYWRkcmVzcxgCI
  AEoCzIkLmdycGMuY2hhbm5lbHoudjEuQWRkcmVzcy5VZHNBZGRyZXNzQg/iPwwSCnVkc0FkZHJlc3NIAFIKdWRzQWRkcmVzcxJgC
  g1vdGhlcl9hZGRyZXNzGAMgASgLMiYuZ3JwYy5jaGFubmVsei52MS5BZGRyZXNzLk90aGVyQWRkcmVzc0IR4j8OEgxvdGhlckFkZ
  HJlc3NIAFIMb3RoZXJBZGRyZXNzGlwKDFRjcElwQWRkcmVzcxItCgppcF9hZGRyZXNzGAEgASgMQg7iPwsSCWlwQWRkcmVzc1IJa
  XBBZGRyZXNzEh0KBHBvcnQYAiABKAVCCeI/BhIEcG9ydFIEcG9ydBo3CgpVZHNBZGRyZXNzEikKCGZpbGVuYW1lGAEgASgJQg3iP
  woSCGZpbGVuYW1lUghmaWxlbmFtZRplCgxPdGhlckFkZHJlc3MSHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEjYKBXZhb
  HVlGAIgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUIK4j8HEgV2YWx1ZVIFdmFsdWVCCQoHYWRkcmVzcyKVBAoIU2VjdXJpdHkSP
  AoDdGxzGAEgASgLMh4uZ3JwYy5jaGFubmVsei52MS5TZWN1cml0eS5UbHNCCOI/BRIDdGxzSABSA3RscxJMCgVvdGhlchgCIAEoC
  zIoLmdycGMuY2hhbm5lbHoudjEuU2VjdXJpdHkuT3RoZXJTZWN1cml0eUIK4j8HEgVvdGhlckgAUgVvdGhlchqLAgoDVGxzEjgKD
  XN0YW5kYXJkX25hbWUYASABKAlCEeI/DhIMc3RhbmRhcmROYW1lSABSDHN0YW5kYXJkTmFtZRIvCgpvdGhlcl9uYW1lGAIgASgJQ
  g7iPwsSCW90aGVyTmFtZUgAUglvdGhlck5hbWUSQgoRbG9jYWxfY2VydGlmaWNhdGUYAyABKAxCFeI/EhIQbG9jYWxDZXJ0aWZpY
  2F0ZVIQbG9jYWxDZXJ0aWZpY2F0ZRJFChJyZW1vdGVfY2VydGlmaWNhdGUYBCABKAxCFuI/ExIRcmVtb3RlQ2VydGlmaWNhdGVSE
  XJlbW90ZUNlcnRpZmljYXRlQg4KDGNpcGhlcl9zdWl0ZRpmCg1PdGhlclNlY3VyaXR5Eh0KBG5hbWUYASABKAlCCeI/BhIEbmFtZ
  VIEbmFtZRI2CgV2YWx1ZRgCIAEoCzIULmdvb2dsZS5wcm90b2J1Zi5BbnlCCuI/BxIFdmFsdWVSBXZhbHVlQgcKBW1vZGVsIpYBC
  gxTb2NrZXRPcHRpb24SHQoEbmFtZRgBIAEoCUIJ4j8GEgRuYW1lUgRuYW1lEiAKBXZhbHVlGAIgASgJQgriPwcSBXZhbHVlUgV2Y
  Wx1ZRJFCgphZGRpdGlvbmFsGAMgASgLMhQuZ29vZ2xlLnByb3RvYnVmLkFueUIP4j8MEgphZGRpdGlvbmFsUgphZGRpdGlvbmFsI
  lsKE1NvY2tldE9wdGlvblRpbWVvdXQSRAoIZHVyYXRpb24YASABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CDeI/ChIIZ
  HVyYXRpb25SCGR1cmF0aW9uIn8KElNvY2tldE9wdGlvbkxpbmdlchIjCgZhY3RpdmUYASABKAhCC+I/CBIGYWN0aXZlUgZhY3Rpd
  mUSRAoIZHVyYXRpb24YAiABKAsyGS5nb29nbGUucHJvdG9idWYuRHVyYXRpb25CDeI/ChIIZHVyYXRpb25SCGR1cmF0aW9uIscMC
  hNTb2NrZXRPcHRpb25UY3BJbmZvEi0KCnRjcGlfc3RhdGUYASABKA1CDuI/CxIJdGNwaVN0YXRlUgl0Y3BpU3RhdGUSNAoNdGNwa
  V9jYV9zdGF0ZRgCIAEoDUIQ4j8NEgt0Y3BpQ2FTdGF0ZVILdGNwaUNhU3RhdGUSPwoQdGNwaV9yZXRyYW5zbWl0cxgDIAEoDUIU4
  j8REg90Y3BpUmV0cmFuc21pdHNSD3RjcGlSZXRyYW5zbWl0cxIwCgt0Y3BpX3Byb2JlcxgEIAEoDUIP4j8MEgp0Y3BpUHJvYmVzU
  gp0Y3BpUHJvYmVzEjMKDHRjcGlfYmFja29mZhgFIAEoDUIQ4j8NEgt0Y3BpQmFja29mZlILdGNwaUJhY2tvZmYSMwoMdGNwaV9vc
  HRpb25zGAYgASgNQhDiPw0SC3RjcGlPcHRpb25zUgt0Y3BpT3B0aW9ucxI6Cg90Y3BpX3NuZF93c2NhbGUYByABKA1CEuI/DxINd
  GNwaVNuZFdzY2FsZVINdGNwaVNuZFdzY2FsZRI6Cg90Y3BpX3Jjdl93c2NhbGUYCCABKA1CEuI/DxINdGNwaVJjdldzY2FsZVINd
  GNwaVJjdldzY2FsZRInCgh0Y3BpX3J0bxgJIAEoDUIM4j8JEgd0Y3BpUnRvUgd0Y3BpUnRvEicKCHRjcGlfYXRvGAogASgNQgziP
  wkSB3RjcGlBdG9SB3RjcGlBdG8SMQoMdGNwaV9zbmRfbXNzGAsgASgNQg/iPwwSCnRjcGlTbmRNc3NSCnRjcGlTbmRNc3MSMQoMd
  GNwaV9yY3ZfbXNzGAwgASgNQg/iPwwSCnRjcGlSY3ZNc3NSCnRjcGlSY3ZNc3MSMwoMdGNwaV91bmFja2VkGA0gASgNQhDiPw0SC
  3RjcGlVbmFja2VkUgt0Y3BpVW5hY2tlZBIwCgt0Y3BpX3NhY2tlZBgOIAEoDUIP4j8MEgp0Y3BpU2Fja2VkUgp0Y3BpU2Fja2VkE
  ioKCXRjcGlfbG9zdBgPIAEoDUIN4j8KEgh0Y3BpTG9zdFIIdGNwaUxvc3QSMwoMdGNwaV9yZXRyYW5zGBAgASgNQhDiPw0SC3Rjc
  GlSZXRyYW5zUgt0Y3BpUmV0cmFucxIzCgx0Y3BpX2ZhY2tldHMYESABKA1CEOI/DRILdGNwaUZhY2tldHNSC3RjcGlGYWNrZXRzE
  kQKE3RjcGlfbGFzdF9kYXRhX3NlbnQYEiABKA1CFeI/EhIQdGNwaUxhc3REYXRhU2VudFIQdGNwaUxhc3REYXRhU2VudBJBChJ0Y
  3BpX2xhc3RfYWNrX3NlbnQYEyABKA1CFOI/ERIPdGNwaUxhc3RBY2tTZW50Ug90Y3BpTGFzdEFja1NlbnQSRAoTdGNwaV9sYXN0X
  2RhdGFfcmVjdhgUIAEoDUIV4j8SEhB0Y3BpTGFzdERhdGFSZWN2UhB0Y3BpTGFzdERhdGFSZWN2EkEKEnRjcGlfbGFzdF9hY2tfc
  mVjdhgVIAEoDUIU4j8REg90Y3BpTGFzdEFja1JlY3ZSD3RjcGlMYXN0QWNrUmVjdhIqCgl0Y3BpX3BtdHUYFiABKA1CDeI/ChIId
  GNwaVBtdHVSCHRjcGlQbXR1EkAKEXRjcGlfcmN2X3NzdGhyZXNoGBcgASgNQhTiPxESD3RjcGlSY3ZTc3RocmVzaFIPdGNwaVJjd
  lNzdGhyZXNoEicKCHRjcGlfcnR0GBggASgNQgziPwkSB3RjcGlSdHRSB3RjcGlSdHQSMAoLdGNwaV9ydHR2YXIYGSABKA1CD+I/D
  BIKdGNwaVJ0dHZhclIKdGNwaVJ0dHZhchJAChF0Y3BpX3NuZF9zc3RocmVzaBgaIAEoDUIU4j8REg90Y3BpU25kU3N0aHJlc2hSD
  3RjcGlTbmRTc3RocmVzaBI0Cg10Y3BpX3NuZF9jd25kGBsgASgNQhDiPw0SC3RjcGlTbmRDd25kUgt0Y3BpU25kQ3duZBIwCgt0Y
  3BpX2Fkdm1zcxgcIAEoDUIP4j8MEgp0Y3BpQWR2bXNzUgp0Y3BpQWR2bXNzEjwKD3RjcGlfcmVvcmRlcmluZxgdIAEoDUIT4j8QE
  g50Y3BpUmVvcmRlcmluZ1IOdGNwaVJlb3JkZXJpbmciiAEKFUdldFRvcENoYW5uZWxzUmVxdWVzdBI9ChBzdGFydF9jaGFubmVsX
  2lkGAEgASgDQhPiPxASDnN0YXJ0Q2hhbm5lbElkUg5zdGFydENoYW5uZWxJZBIwCgttYXhfcmVzdWx0cxgCIAEoA0IP4j8MEgptY
  XhSZXN1bHRzUgptYXhSZXN1bHRzIncKFkdldFRvcENoYW5uZWxzUmVzcG9uc2USQQoHY2hhbm5lbBgBIAMoCzIZLmdycGMuY2hhb
  m5lbHoudjEuQ2hhbm5lbEIM4j8JEgdjaGFubmVsUgdjaGFubmVsEhoKA2VuZBgCIAEoCEII4j8FEgNlbmRSA2VuZCKBAQoRR2V0U
  2VydmVyc1JlcXVlc3QSOgoPc3RhcnRfc2VydmVyX2lkGAEgASgDQhLiPw8SDXN0YXJ0U2VydmVySWRSDXN0YXJ0U2VydmVySWQSM
  AoLbWF4X3Jlc3VsdHMYAiABKANCD+I/DBIKbWF4UmVzdWx0c1IKbWF4UmVzdWx0cyJvChJHZXRTZXJ2ZXJzUmVzcG9uc2USPQoGc
  2VydmVyGAEgAygLMhguZ3JwYy5jaGFubmVsei52MS5TZXJ2ZXJCC+I/CBIGc2VydmVyUgZzZXJ2ZXISGgoDZW5kGAIgASgIQgjiP
  wUSA2VuZFIDZW5kIj4KEEdldFNlcnZlclJlcXVlc3QSKgoJc2VydmVyX2lkGAEgASgDQg3iPwoSCHNlcnZlcklkUghzZXJ2ZXJJZ
  CJSChFHZXRTZXJ2ZXJSZXNwb25zZRI9CgZzZXJ2ZXIYASABKAsyGC5ncnBjLmNoYW5uZWx6LnYxLlNlcnZlckIL4j8IEgZzZXJ2Z
  XJSBnNlcnZlciKzAQoXR2V0U2VydmVyU29ja2V0c1JlcXVlc3QSKgoJc2VydmVyX2lkGAEgASgDQg3iPwoSCHNlcnZlcklkUghzZ
  XJ2ZXJJZBI6Cg9zdGFydF9zb2NrZXRfaWQYAiABKANCEuI/DxINc3RhcnRTb2NrZXRJZFINc3RhcnRTb2NrZXRJZBIwCgttYXhfc
  mVzdWx0cxgDIAEoA0IP4j8MEgptYXhSZXN1bHRzUgptYXhSZXN1bHRzIoIBChhHZXRTZXJ2ZXJTb2NrZXRzUmVzcG9uc2USSgoKc
  29ja2V0X3JlZhgBIAMoCzIbLmdycGMuY2hhbm5lbHoudjEuU29ja2V0UmVmQg7iPwsSCXNvY2tldFJlZlIJc29ja2V0UmVmEhoKA
  2VuZBgCIAEoCEII4j8FEgNlbmRSA2VuZCJCChFHZXRDaGFubmVsUmVxdWVzdBItCgpjaGFubmVsX2lkGAEgASgDQg7iPwsSCWNoY
  W5uZWxJZFIJY2hhbm5lbElkIlcKEkdldENoYW5uZWxSZXNwb25zZRJBCgdjaGFubmVsGAEgASgLMhkuZ3JwYy5jaGFubmVsei52M
  S5DaGFubmVsQgziPwkSB2NoYW5uZWxSB2NoYW5uZWwiTgoUR2V0U3ViY2hhbm5lbFJlcXVlc3QSNgoNc3ViY2hhbm5lbF9pZBgBI
  AEoA0IR4j8OEgxzdWJjaGFubmVsSWRSDHN1YmNoYW5uZWxJZCJmChVHZXRTdWJjaGFubmVsUmVzcG9uc2USTQoKc3ViY2hhbm5lb
  BgBIAEoCzIcLmdycGMuY2hhbm5lbHoudjEuU3ViY2hhbm5lbEIP4j8MEgpzdWJjaGFubmVsUgpzdWJjaGFubmVsImYKEEdldFNvY
  2tldFJlcXVlc3QSKgoJc29ja2V0X2lkGAEgASgDQg3iPwoSCHNvY2tldElkUghzb2NrZXRJZBImCgdzdW1tYXJ5GAIgASgIQgziP
  wkSB3N1bW1hcnlSB3N1bW1hcnkiUgoRR2V0U29ja2V0UmVzcG9uc2USPQoGc29ja2V0GAEgASgLMhguZ3JwYy5jaGFubmVsei52M
  S5Tb2NrZXRCC+I/CBIGc29ja2V0UgZzb2NrZXQymgUKCENoYW5uZWx6EmMKDkdldFRvcENoYW5uZWxzEicuZ3JwYy5jaGFubmVse
  i52MS5HZXRUb3BDaGFubmVsc1JlcXVlc3QaKC5ncnBjLmNoYW5uZWx6LnYxLkdldFRvcENoYW5uZWxzUmVzcG9uc2USVwoKR2V0U
  2VydmVycxIjLmdycGMuY2hhbm5lbHoudjEuR2V0U2VydmVyc1JlcXVlc3QaJC5ncnBjLmNoYW5uZWx6LnYxLkdldFNlcnZlcnNSZ
  XNwb25zZRJUCglHZXRTZXJ2ZXISIi5ncnBjLmNoYW5uZWx6LnYxLkdldFNlcnZlclJlcXVlc3QaIy5ncnBjLmNoYW5uZWx6LnYxL
  kdldFNlcnZlclJlc3BvbnNlEmkKEEdldFNlcnZlclNvY2tldHMSKS5ncnBjLmNoYW5uZWx6LnYxLkdldFNlcnZlclNvY2tldHNSZ
  XF1ZXN0GiouZ3JwYy5jaGFubmVsei52MS5HZXRTZXJ2ZXJTb2NrZXRzUmVzcG9uc2USVwoKR2V0Q2hhbm5lbBIjLmdycGMuY2hhb
  m5lbHoudjEuR2V0Q2hhbm5lbFJlcXVlc3QaJC5ncnBjLmNoYW5uZWx6LnYxLkdldENoYW5uZWxSZXNwb25zZRJgCg1HZXRTdWJja
  GFubmVsEiYuZ3JwYy5jaGFubmVsei52MS5HZXRTdWJjaGFubmVsUmVxdWVzdBonLmdycGMuY2hhbm5lbHoudjEuR2V0U3ViY2hhb
  m5lbFJlc3BvbnNlElQKCUdldFNvY2tldBIiLmdycGMuY2hhbm5lbHoudjEuR2V0U29ja2V0UmVxdWVzdBojLmdycGMuY2hhbm5lb
  HoudjEuR2V0U29ja2V0UmVzcG9uc2VCWAoTaW8uZ3JwYy5jaGFubmVsei52MUINQ2hhbm5lbHpQcm90b1ABWjBnb29nbGUuZ29sY
  W5nLm9yZy9ncnBjL2NoYW5uZWx6L2dycGNfY2hhbm5lbHpfdjFiBnByb3RvMw=="""
      ).mkString)
  lazy val scalaDescriptor: _root_.scalapb.descriptors.FileDescriptor = {
    val scalaProto = com.google.protobuf.descriptor.FileDescriptorProto.parseFrom(ProtoBytes)
    _root_.scalapb.descriptors.FileDescriptor.buildFrom(scalaProto, dependencies.map(_.scalaDescriptor))
  }
  lazy val javaDescriptor: com.google.protobuf.Descriptors.FileDescriptor = {
    val javaProto = com.google.protobuf.DescriptorProtos.FileDescriptorProto.parseFrom(ProtoBytes)
    com.google.protobuf.Descriptors.FileDescriptor.buildFrom(javaProto, Array(
      com.google.protobuf.any.AnyProto.javaDescriptor,
      com.google.protobuf.duration.DurationProto.javaDescriptor,
      com.google.protobuf.timestamp.TimestampProto.javaDescriptor,
      com.google.protobuf.wrappers.WrappersProto.javaDescriptor
    ))
  }
  @deprecated("Use javaDescriptor instead. In a future version this will refer to scalaDescriptor.", "ScalaPB 0.5.47")
  def descriptor: com.google.protobuf.Descriptors.FileDescriptor = javaDescriptor
}