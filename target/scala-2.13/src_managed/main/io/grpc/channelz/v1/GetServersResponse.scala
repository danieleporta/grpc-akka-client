// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.grpc.channelz.v1

/** @param server
  *   list of servers that the connection detail service knows about.  Sorted in
  *   ascending server_id order.
  *   Must contain at least 1 result, otherwise 'end' must be true.
  * @param end
  *   If set, indicates that the list of servers is the final list.  Requesting
  *   more servers will only return more if they are created after this RPC
  *   completes.
  */
@SerialVersionUID(0L)
final case class GetServersResponse(
    server: _root_.scala.Seq[io.grpc.channelz.v1.Server] = _root_.scala.Seq.empty,
    end: _root_.scala.Boolean = false
    ) extends scalapb.GeneratedMessage with scalapb.Message[GetServersResponse] with scalapb.lenses.Updatable[GetServersResponse] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      server.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      
      {
        val __value = end
        if (__value != false) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeBoolSize(2, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      server.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = end
        if (__v != false) {
          _output__.writeBool(2, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.grpc.channelz.v1.GetServersResponse = {
      val __server = (_root_.scala.collection.immutable.Vector.newBuilder[io.grpc.channelz.v1.Server] ++= this.server)
      var __end = this.end
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __server += _root_.scalapb.LiteParser.readMessage(_input__, io.grpc.channelz.v1.Server.defaultInstance)
          case 16 =>
            __end = _input__.readBool()
          case tag => _input__.skipField(tag)
        }
      }
      io.grpc.channelz.v1.GetServersResponse(
          server = __server.result(),
          end = __end
      )
    }
    def clearServer = copy(server = _root_.scala.Seq.empty)
    def addServer(__vs: io.grpc.channelz.v1.Server*): GetServersResponse = addAllServer(__vs)
    def addAllServer(__vs: Iterable[io.grpc.channelz.v1.Server]): GetServersResponse = copy(server = server ++ __vs)
    def withServer(__v: _root_.scala.Seq[io.grpc.channelz.v1.Server]): GetServersResponse = copy(server = __v)
    def withEnd(__v: _root_.scala.Boolean): GetServersResponse = copy(end = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => server
        case 2 => {
          val __t = end
          if (__t != false) __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(server.iterator.map(_.toPMessage).toVector)
        case 2 => _root_.scalapb.descriptors.PBoolean(end)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.grpc.channelz.v1.GetServersResponse
}

object GetServersResponse extends scalapb.GeneratedMessageCompanion[io.grpc.channelz.v1.GetServersResponse] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.grpc.channelz.v1.GetServersResponse] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.grpc.channelz.v1.GetServersResponse = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    io.grpc.channelz.v1.GetServersResponse(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.Seq[io.grpc.channelz.v1.Server]],
      __fieldsMap.getOrElse(__fields.get(1), false).asInstanceOf[_root_.scala.Boolean]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.grpc.channelz.v1.GetServersResponse] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      io.grpc.channelz.v1.GetServersResponse(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Seq[io.grpc.channelz.v1.Server]]).getOrElse(_root_.scala.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Boolean]).getOrElse(false)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ChannelzProto.javaDescriptor.getMessageTypes.get(23)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ChannelzProto.scalaDescriptor.messages(23)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.grpc.channelz.v1.Server
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.grpc.channelz.v1.GetServersResponse(
    server = _root_.scala.Seq.empty,
    end = false
  )
  implicit class GetServersResponseLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.GetServersResponse]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.grpc.channelz.v1.GetServersResponse](_l) {
    def server: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.grpc.channelz.v1.Server]] = field(_.server)((c_, f_) => c_.copy(server = f_))
    def end: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Boolean] = field(_.end)((c_, f_) => c_.copy(end = f_))
  }
  final val SERVER_FIELD_NUMBER = 1
  final val END_FIELD_NUMBER = 2
  def of(
    server: _root_.scala.Seq[io.grpc.channelz.v1.Server],
    end: _root_.scala.Boolean
  ): _root_.io.grpc.channelz.v1.GetServersResponse = _root_.io.grpc.channelz.v1.GetServersResponse(
    server,
    end
  )
}
