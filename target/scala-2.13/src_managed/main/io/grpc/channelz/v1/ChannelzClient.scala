
// Generated by Akka gRPC. DO NOT EDIT.
package io.grpc.channelz.v1

import scala.concurrent.ExecutionContext

import io.grpc.ManagedChannel
import io.grpc.MethodDescriptor

import akka.grpc.GrpcClientSettings

import akka.grpc.scaladsl.AkkaGrpcClient

import akka.grpc.internal.Marshaller
import akka.grpc.internal.NettyClientUtils
import akka.grpc.internal.ClientState

import akka.stream.Materializer

import akka.grpc.internal.ScalaUnaryRequestBuilder
import akka.grpc.scaladsl.SingleResponseRequestBuilder

// Not sealed so users can extend to write their stubs
trait ChannelzClient extends Channelz with ChannelzClientPowerApi with AkkaGrpcClient

object ChannelzClient {
  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext): ChannelzClient =
    new DefaultChannelzClient(settings)
}

final class DefaultChannelzClient(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext) extends ChannelzClient {
  import DefaultChannelzClient._

  private val options = NettyClientUtils.callOptions(settings)
  private val clientState = new ClientState(settings)

  
    private def getTopChannelsRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(getTopChannelsDescriptor, channel, options, settings)
      
    }
  
    private def getServersRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(getServersDescriptor, channel, options, settings)
      
    }
  
    private def getServerRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(getServerDescriptor, channel, options, settings)
      
    }
  
    private def getServerSocketsRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(getServerSocketsDescriptor, channel, options, settings)
      
    }
  
    private def getChannelRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(getChannelDescriptor, channel, options, settings)
      
    }
  
    private def getSubchannelRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(getSubchannelDescriptor, channel, options, settings)
      
    }
  
    private def getSocketRequestBuilder(channel:scala.concurrent.Future[ManagedChannel]) = {
      
        new ScalaUnaryRequestBuilder(getSocketDescriptor, channel, options, settings)
      
    }
  

  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getTopChannels(io.grpc.channelz.v1.GetTopChannelsRequest) if possible.
     */
    
      override def getTopChannels(): SingleResponseRequestBuilder[io.grpc.channelz.v1.GetTopChannelsRequest, io.grpc.channelz.v1.GetTopChannelsResponse] =
        clientState.withChannel(getTopChannelsRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of getTopChannels
     */
    def getTopChannels(in: io.grpc.channelz.v1.GetTopChannelsRequest): scala.concurrent.Future[io.grpc.channelz.v1.GetTopChannelsResponse] =
      getTopChannels().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getServers(io.grpc.channelz.v1.GetServersRequest) if possible.
     */
    
      override def getServers(): SingleResponseRequestBuilder[io.grpc.channelz.v1.GetServersRequest, io.grpc.channelz.v1.GetServersResponse] =
        clientState.withChannel(getServersRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of getServers
     */
    def getServers(in: io.grpc.channelz.v1.GetServersRequest): scala.concurrent.Future[io.grpc.channelz.v1.GetServersResponse] =
      getServers().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getServer(io.grpc.channelz.v1.GetServerRequest) if possible.
     */
    
      override def getServer(): SingleResponseRequestBuilder[io.grpc.channelz.v1.GetServerRequest, io.grpc.channelz.v1.GetServerResponse] =
        clientState.withChannel(getServerRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of getServer
     */
    def getServer(in: io.grpc.channelz.v1.GetServerRequest): scala.concurrent.Future[io.grpc.channelz.v1.GetServerResponse] =
      getServer().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getServerSockets(io.grpc.channelz.v1.GetServerSocketsRequest) if possible.
     */
    
      override def getServerSockets(): SingleResponseRequestBuilder[io.grpc.channelz.v1.GetServerSocketsRequest, io.grpc.channelz.v1.GetServerSocketsResponse] =
        clientState.withChannel(getServerSocketsRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of getServerSockets
     */
    def getServerSockets(in: io.grpc.channelz.v1.GetServerSocketsRequest): scala.concurrent.Future[io.grpc.channelz.v1.GetServerSocketsResponse] =
      getServerSockets().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getChannel(io.grpc.channelz.v1.GetChannelRequest) if possible.
     */
    
      override def getChannel(): SingleResponseRequestBuilder[io.grpc.channelz.v1.GetChannelRequest, io.grpc.channelz.v1.GetChannelResponse] =
        clientState.withChannel(getChannelRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of getChannel
     */
    def getChannel(in: io.grpc.channelz.v1.GetChannelRequest): scala.concurrent.Future[io.grpc.channelz.v1.GetChannelResponse] =
      getChannel().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getSubchannel(io.grpc.channelz.v1.GetSubchannelRequest) if possible.
     */
    
      override def getSubchannel(): SingleResponseRequestBuilder[io.grpc.channelz.v1.GetSubchannelRequest, io.grpc.channelz.v1.GetSubchannelResponse] =
        clientState.withChannel(getSubchannelRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of getSubchannel
     */
    def getSubchannel(in: io.grpc.channelz.v1.GetSubchannelRequest): scala.concurrent.Future[io.grpc.channelz.v1.GetSubchannelResponse] =
      getSubchannel().invoke(in)
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getSocket(io.grpc.channelz.v1.GetSocketRequest) if possible.
     */
    
      override def getSocket(): SingleResponseRequestBuilder[io.grpc.channelz.v1.GetSocketRequest, io.grpc.channelz.v1.GetSocketResponse] =
        clientState.withChannel(getSocketRequestBuilder _)
    

    /**
     * For access to method metadata use the parameterless version of getSocket
     */
    def getSocket(in: io.grpc.channelz.v1.GetSocketRequest): scala.concurrent.Future[io.grpc.channelz.v1.GetSocketResponse] =
      getSocket().invoke(in)
  

  override def close(): scala.concurrent.Future[akka.Done] = clientState.close()
  override def closed(): scala.concurrent.Future[akka.Done] = clientState.closed()

}



private object DefaultChannelzClient {

  def apply(settings: GrpcClientSettings)(implicit mat: Materializer, ex: ExecutionContext): ChannelzClient =
    new DefaultChannelzClient(settings)

  import Channelz.Serializers._

  
    private val getTopChannelsDescriptor: MethodDescriptor[io.grpc.channelz.v1.GetTopChannelsRequest, io.grpc.channelz.v1.GetTopChannelsResponse] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.channelz.v1.Channelz", "GetTopChannels"))
        .setRequestMarshaller(new Marshaller(GetTopChannelsRequestSerializer))
        .setResponseMarshaller(new Marshaller(GetTopChannelsResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val getServersDescriptor: MethodDescriptor[io.grpc.channelz.v1.GetServersRequest, io.grpc.channelz.v1.GetServersResponse] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.channelz.v1.Channelz", "GetServers"))
        .setRequestMarshaller(new Marshaller(GetServersRequestSerializer))
        .setResponseMarshaller(new Marshaller(GetServersResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val getServerDescriptor: MethodDescriptor[io.grpc.channelz.v1.GetServerRequest, io.grpc.channelz.v1.GetServerResponse] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.channelz.v1.Channelz", "GetServer"))
        .setRequestMarshaller(new Marshaller(GetServerRequestSerializer))
        .setResponseMarshaller(new Marshaller(GetServerResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val getServerSocketsDescriptor: MethodDescriptor[io.grpc.channelz.v1.GetServerSocketsRequest, io.grpc.channelz.v1.GetServerSocketsResponse] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.channelz.v1.Channelz", "GetServerSockets"))
        .setRequestMarshaller(new Marshaller(GetServerSocketsRequestSerializer))
        .setResponseMarshaller(new Marshaller(GetServerSocketsResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val getChannelDescriptor: MethodDescriptor[io.grpc.channelz.v1.GetChannelRequest, io.grpc.channelz.v1.GetChannelResponse] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.channelz.v1.Channelz", "GetChannel"))
        .setRequestMarshaller(new Marshaller(GetChannelRequestSerializer))
        .setResponseMarshaller(new Marshaller(GetChannelResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val getSubchannelDescriptor: MethodDescriptor[io.grpc.channelz.v1.GetSubchannelRequest, io.grpc.channelz.v1.GetSubchannelResponse] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.channelz.v1.Channelz", "GetSubchannel"))
        .setRequestMarshaller(new Marshaller(GetSubchannelRequestSerializer))
        .setResponseMarshaller(new Marshaller(GetSubchannelResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
    private val getSocketDescriptor: MethodDescriptor[io.grpc.channelz.v1.GetSocketRequest, io.grpc.channelz.v1.GetSocketResponse] =
      MethodDescriptor.newBuilder()
        .setType(
   MethodDescriptor.MethodType.UNARY 
  
  
  
)
        .setFullMethodName(MethodDescriptor.generateFullMethodName("grpc.channelz.v1.Channelz", "GetSocket"))
        .setRequestMarshaller(new Marshaller(GetSocketRequestSerializer))
        .setResponseMarshaller(new Marshaller(GetSocketResponseSerializer))
        .setSampledToLocalTracing(true)
        .build()
  
}

trait ChannelzClientPowerApi {
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getTopChannels(io.grpc.channelz.v1.GetTopChannelsRequest) if possible.
     */
    
      def getTopChannels(): SingleResponseRequestBuilder[io.grpc.channelz.v1.GetTopChannelsRequest, io.grpc.channelz.v1.GetTopChannelsResponse] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getServers(io.grpc.channelz.v1.GetServersRequest) if possible.
     */
    
      def getServers(): SingleResponseRequestBuilder[io.grpc.channelz.v1.GetServersRequest, io.grpc.channelz.v1.GetServersResponse] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getServer(io.grpc.channelz.v1.GetServerRequest) if possible.
     */
    
      def getServer(): SingleResponseRequestBuilder[io.grpc.channelz.v1.GetServerRequest, io.grpc.channelz.v1.GetServerResponse] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getServerSockets(io.grpc.channelz.v1.GetServerSocketsRequest) if possible.
     */
    
      def getServerSockets(): SingleResponseRequestBuilder[io.grpc.channelz.v1.GetServerSocketsRequest, io.grpc.channelz.v1.GetServerSocketsResponse] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getChannel(io.grpc.channelz.v1.GetChannelRequest) if possible.
     */
    
      def getChannel(): SingleResponseRequestBuilder[io.grpc.channelz.v1.GetChannelRequest, io.grpc.channelz.v1.GetChannelResponse] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getSubchannel(io.grpc.channelz.v1.GetSubchannelRequest) if possible.
     */
    
      def getSubchannel(): SingleResponseRequestBuilder[io.grpc.channelz.v1.GetSubchannelRequest, io.grpc.channelz.v1.GetSubchannelResponse] = ???
    
  
    /**
     * Lower level "lifted" version of the method, giving access to request metadata etc.
     * prefer getSocket(io.grpc.channelz.v1.GetSocketRequest) if possible.
     */
    
      def getSocket(): SingleResponseRequestBuilder[io.grpc.channelz.v1.GetSocketRequest, io.grpc.channelz.v1.GetSocketResponse] = ???
    
  

}
