
// Generated by Akka gRPC. DO NOT EDIT.
package io.grpc.channelz.v1

/**
 * Channelz is a service exposed by gRPC servers that provides detailed debug
 * information.
 */
trait Channelz {
  
  /**
   * Gets all root channels (i.e. channels the application has directly
   * created). This does not include subchannels nor non-top level channels.
   */
  def getTopChannels(in: io.grpc.channelz.v1.GetTopChannelsRequest): scala.concurrent.Future[io.grpc.channelz.v1.GetTopChannelsResponse]
  
  /**
   * Gets all servers that exist in the process.
   */
  def getServers(in: io.grpc.channelz.v1.GetServersRequest): scala.concurrent.Future[io.grpc.channelz.v1.GetServersResponse]
  
  /**
   * Returns a single Server, or else a NOT_FOUND code.
   */
  def getServer(in: io.grpc.channelz.v1.GetServerRequest): scala.concurrent.Future[io.grpc.channelz.v1.GetServerResponse]
  
  /**
   * Gets all server sockets that exist in the process.
   */
  def getServerSockets(in: io.grpc.channelz.v1.GetServerSocketsRequest): scala.concurrent.Future[io.grpc.channelz.v1.GetServerSocketsResponse]
  
  /**
   * Returns a single Channel, or else a NOT_FOUND code.
   */
  def getChannel(in: io.grpc.channelz.v1.GetChannelRequest): scala.concurrent.Future[io.grpc.channelz.v1.GetChannelResponse]
  
  /**
   * Returns a single Subchannel, or else a NOT_FOUND code.
   */
  def getSubchannel(in: io.grpc.channelz.v1.GetSubchannelRequest): scala.concurrent.Future[io.grpc.channelz.v1.GetSubchannelResponse]
  
  /**
   * Returns a single Socket or else a NOT_FOUND code.
   */
  def getSocket(in: io.grpc.channelz.v1.GetSocketRequest): scala.concurrent.Future[io.grpc.channelz.v1.GetSocketResponse]
  
}

object Channelz {
  val name = "grpc.channelz.v1.Channelz"

  object Serializers {
    import akka.grpc.scaladsl.ScalapbProtobufSerializer
    
    val GetServerRequestSerializer = new ScalapbProtobufSerializer(io.grpc.channelz.v1.GetServerRequest.messageCompanion)
    
    val GetServersRequestSerializer = new ScalapbProtobufSerializer(io.grpc.channelz.v1.GetServersRequest.messageCompanion)
    
    val GetTopChannelsRequestSerializer = new ScalapbProtobufSerializer(io.grpc.channelz.v1.GetTopChannelsRequest.messageCompanion)
    
    val GetTopChannelsResponseSerializer = new ScalapbProtobufSerializer(io.grpc.channelz.v1.GetTopChannelsResponse.messageCompanion)
    
    val GetServerSocketsResponseSerializer = new ScalapbProtobufSerializer(io.grpc.channelz.v1.GetServerSocketsResponse.messageCompanion)
    
    val GetSocketRequestSerializer = new ScalapbProtobufSerializer(io.grpc.channelz.v1.GetSocketRequest.messageCompanion)
    
    val GetSubchannelResponseSerializer = new ScalapbProtobufSerializer(io.grpc.channelz.v1.GetSubchannelResponse.messageCompanion)
    
    val GetSocketResponseSerializer = new ScalapbProtobufSerializer(io.grpc.channelz.v1.GetSocketResponse.messageCompanion)
    
    val GetSubchannelRequestSerializer = new ScalapbProtobufSerializer(io.grpc.channelz.v1.GetSubchannelRequest.messageCompanion)
    
    val GetServersResponseSerializer = new ScalapbProtobufSerializer(io.grpc.channelz.v1.GetServersResponse.messageCompanion)
    
    val GetChannelResponseSerializer = new ScalapbProtobufSerializer(io.grpc.channelz.v1.GetChannelResponse.messageCompanion)
    
    val GetServerSocketsRequestSerializer = new ScalapbProtobufSerializer(io.grpc.channelz.v1.GetServerSocketsRequest.messageCompanion)
    
    val GetChannelRequestSerializer = new ScalapbProtobufSerializer(io.grpc.channelz.v1.GetChannelRequest.messageCompanion)
    
    val GetServerResponseSerializer = new ScalapbProtobufSerializer(io.grpc.channelz.v1.GetServerResponse.messageCompanion)
    
  }
}
