// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.grpc.channelz.v1

/** Address represents the address used to create the socket.
  */
@SerialVersionUID(0L)
final case class Address(
    address: io.grpc.channelz.v1.Address.Address = io.grpc.channelz.v1.Address.Address.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[Address] with scalapb.lenses.Updatable[Address] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (address.tcpipAddress.isDefined) {
        val __value = address.tcpipAddress.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (address.udsAddress.isDefined) {
        val __value = address.udsAddress.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (address.otherAddress.isDefined) {
        val __value = address.otherAddress.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      address.tcpipAddress.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      address.udsAddress.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      address.otherAddress.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.grpc.channelz.v1.Address = {
      var __address = this.address
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __address = io.grpc.channelz.v1.Address.Address.TcpipAddress(_root_.scalapb.LiteParser.readMessage(_input__, address.tcpipAddress.getOrElse(io.grpc.channelz.v1.Address.TcpIpAddress.defaultInstance)))
          case 18 =>
            __address = io.grpc.channelz.v1.Address.Address.UdsAddress(_root_.scalapb.LiteParser.readMessage(_input__, address.udsAddress.getOrElse(io.grpc.channelz.v1.Address.UdsAddress.defaultInstance)))
          case 26 =>
            __address = io.grpc.channelz.v1.Address.Address.OtherAddress(_root_.scalapb.LiteParser.readMessage(_input__, address.otherAddress.getOrElse(io.grpc.channelz.v1.Address.OtherAddress.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      io.grpc.channelz.v1.Address(
          address = __address
      )
    }
    def getTcpipAddress: io.grpc.channelz.v1.Address.TcpIpAddress = address.tcpipAddress.getOrElse(io.grpc.channelz.v1.Address.TcpIpAddress.defaultInstance)
    def withTcpipAddress(__v: io.grpc.channelz.v1.Address.TcpIpAddress): Address = copy(address = io.grpc.channelz.v1.Address.Address.TcpipAddress(__v))
    def getUdsAddress: io.grpc.channelz.v1.Address.UdsAddress = address.udsAddress.getOrElse(io.grpc.channelz.v1.Address.UdsAddress.defaultInstance)
    def withUdsAddress(__v: io.grpc.channelz.v1.Address.UdsAddress): Address = copy(address = io.grpc.channelz.v1.Address.Address.UdsAddress(__v))
    def getOtherAddress: io.grpc.channelz.v1.Address.OtherAddress = address.otherAddress.getOrElse(io.grpc.channelz.v1.Address.OtherAddress.defaultInstance)
    def withOtherAddress(__v: io.grpc.channelz.v1.Address.OtherAddress): Address = copy(address = io.grpc.channelz.v1.Address.Address.OtherAddress(__v))
    def clearAddress: Address = copy(address = io.grpc.channelz.v1.Address.Address.Empty)
    def withAddress(__v: io.grpc.channelz.v1.Address.Address): Address = copy(address = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => address.tcpipAddress.orNull
        case 2 => address.udsAddress.orNull
        case 3 => address.otherAddress.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => address.tcpipAddress.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => address.udsAddress.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => address.otherAddress.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.grpc.channelz.v1.Address
}

object Address extends scalapb.GeneratedMessageCompanion[io.grpc.channelz.v1.Address] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.grpc.channelz.v1.Address] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.grpc.channelz.v1.Address = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    io.grpc.channelz.v1.Address(
      address = __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[io.grpc.channelz.v1.Address.TcpIpAddress]].map(io.grpc.channelz.v1.Address.Address.TcpipAddress)
    .orElse[io.grpc.channelz.v1.Address.Address](__fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[io.grpc.channelz.v1.Address.UdsAddress]].map(io.grpc.channelz.v1.Address.Address.UdsAddress))
    .orElse[io.grpc.channelz.v1.Address.Address](__fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[io.grpc.channelz.v1.Address.OtherAddress]].map(io.grpc.channelz.v1.Address.Address.OtherAddress))
    .getOrElse(io.grpc.channelz.v1.Address.Address.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.grpc.channelz.v1.Address] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      io.grpc.channelz.v1.Address(
        address = __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.grpc.channelz.v1.Address.TcpIpAddress]]).map(io.grpc.channelz.v1.Address.Address.TcpipAddress)
    .orElse[io.grpc.channelz.v1.Address.Address](__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.grpc.channelz.v1.Address.UdsAddress]]).map(io.grpc.channelz.v1.Address.Address.UdsAddress))
    .orElse[io.grpc.channelz.v1.Address.Address](__fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.grpc.channelz.v1.Address.OtherAddress]]).map(io.grpc.channelz.v1.Address.Address.OtherAddress))
    .getOrElse(io.grpc.channelz.v1.Address.Address.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ChannelzProto.javaDescriptor.getMessageTypes.get(14)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ChannelzProto.scalaDescriptor.messages(14)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.grpc.channelz.v1.Address.TcpIpAddress
      case 2 => __out = io.grpc.channelz.v1.Address.UdsAddress
      case 3 => __out = io.grpc.channelz.v1.Address.OtherAddress
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] =
    Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]](
      _root_.io.grpc.channelz.v1.Address.TcpIpAddress,
      _root_.io.grpc.channelz.v1.Address.UdsAddress,
      _root_.io.grpc.channelz.v1.Address.OtherAddress
    )
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.grpc.channelz.v1.Address(
    address = io.grpc.channelz.v1.Address.Address.Empty
  )
  sealed trait Address extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isTcpipAddress: _root_.scala.Boolean = false
    def isUdsAddress: _root_.scala.Boolean = false
    def isOtherAddress: _root_.scala.Boolean = false
    def tcpipAddress: _root_.scala.Option[io.grpc.channelz.v1.Address.TcpIpAddress] = _root_.scala.None
    def udsAddress: _root_.scala.Option[io.grpc.channelz.v1.Address.UdsAddress] = _root_.scala.None
    def otherAddress: _root_.scala.Option[io.grpc.channelz.v1.Address.OtherAddress] = _root_.scala.None
  }
  object Address extends {
    @SerialVersionUID(0L)
    case object Empty extends io.grpc.channelz.v1.Address.Address {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class TcpipAddress(value: io.grpc.channelz.v1.Address.TcpIpAddress) extends io.grpc.channelz.v1.Address.Address {
      type ValueType = io.grpc.channelz.v1.Address.TcpIpAddress
      override def isTcpipAddress: _root_.scala.Boolean = true
      override def tcpipAddress: _root_.scala.Option[io.grpc.channelz.v1.Address.TcpIpAddress] = Some(value)
      override def number: _root_.scala.Int = 1
    }
    @SerialVersionUID(0L)
    final case class UdsAddress(value: io.grpc.channelz.v1.Address.UdsAddress) extends io.grpc.channelz.v1.Address.Address {
      type ValueType = io.grpc.channelz.v1.Address.UdsAddress
      override def isUdsAddress: _root_.scala.Boolean = true
      override def udsAddress: _root_.scala.Option[io.grpc.channelz.v1.Address.UdsAddress] = Some(value)
      override def number: _root_.scala.Int = 2
    }
    @SerialVersionUID(0L)
    final case class OtherAddress(value: io.grpc.channelz.v1.Address.OtherAddress) extends io.grpc.channelz.v1.Address.Address {
      type ValueType = io.grpc.channelz.v1.Address.OtherAddress
      override def isOtherAddress: _root_.scala.Boolean = true
      override def otherAddress: _root_.scala.Option[io.grpc.channelz.v1.Address.OtherAddress] = Some(value)
      override def number: _root_.scala.Int = 3
    }
  }
  /** @param ipAddress
    *   Either the IPv4 or IPv6 address in bytes.  Will be either 4 bytes or 16
    *   bytes in length.
    * @param port
    *   0-64k, or -1 if not appropriate.
    */
  @SerialVersionUID(0L)
  final case class TcpIpAddress(
      ipAddress: _root_.com.google.protobuf.ByteString = _root_.com.google.protobuf.ByteString.EMPTY,
      port: _root_.scala.Int = 0
      ) extends scalapb.GeneratedMessage with scalapb.Message[TcpIpAddress] with scalapb.lenses.Updatable[TcpIpAddress] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = ipAddress
          if (__value != _root_.com.google.protobuf.ByteString.EMPTY) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeBytesSize(1, __value)
          }
        };
        
        {
          val __value = port
          if (__value != 0) {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeInt32Size(2, __value)
          }
        };
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = ipAddress
          if (__v != _root_.com.google.protobuf.ByteString.EMPTY) {
            _output__.writeBytes(1, __v)
          }
        };
        {
          val __v = port
          if (__v != 0) {
            _output__.writeInt32(2, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.grpc.channelz.v1.Address.TcpIpAddress = {
        var __ipAddress = this.ipAddress
        var __port = this.port
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __ipAddress = _input__.readBytes()
            case 16 =>
              __port = _input__.readInt32()
            case tag => _input__.skipField(tag)
          }
        }
        io.grpc.channelz.v1.Address.TcpIpAddress(
            ipAddress = __ipAddress,
            port = __port
        )
      }
      def withIpAddress(__v: _root_.com.google.protobuf.ByteString): TcpIpAddress = copy(ipAddress = __v)
      def withPort(__v: _root_.scala.Int): TcpIpAddress = copy(port = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = ipAddress
            if (__t != _root_.com.google.protobuf.ByteString.EMPTY) __t else null
          }
          case 2 => {
            val __t = port
            if (__t != 0) __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PByteString(ipAddress)
          case 2 => _root_.scalapb.descriptors.PInt(port)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = io.grpc.channelz.v1.Address.TcpIpAddress
  }
  
  object TcpIpAddress extends scalapb.GeneratedMessageCompanion[io.grpc.channelz.v1.Address.TcpIpAddress] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.grpc.channelz.v1.Address.TcpIpAddress] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.grpc.channelz.v1.Address.TcpIpAddress = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      io.grpc.channelz.v1.Address.TcpIpAddress(
        __fieldsMap.getOrElse(__fields.get(0), _root_.com.google.protobuf.ByteString.EMPTY).asInstanceOf[_root_.com.google.protobuf.ByteString],
        __fieldsMap.getOrElse(__fields.get(1), 0).asInstanceOf[_root_.scala.Int]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.grpc.channelz.v1.Address.TcpIpAddress] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        io.grpc.channelz.v1.Address.TcpIpAddress(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.com.google.protobuf.ByteString]).getOrElse(_root_.com.google.protobuf.ByteString.EMPTY),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scala.Int]).getOrElse(0)
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.grpc.channelz.v1.Address.javaDescriptor.getNestedTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.grpc.channelz.v1.Address.scalaDescriptor.nestedMessages(0)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.grpc.channelz.v1.Address.TcpIpAddress(
      ipAddress = _root_.com.google.protobuf.ByteString.EMPTY,
      port = 0
    )
    implicit class TcpIpAddressLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.Address.TcpIpAddress]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.grpc.channelz.v1.Address.TcpIpAddress](_l) {
      def ipAddress: _root_.scalapb.lenses.Lens[UpperPB, _root_.com.google.protobuf.ByteString] = field(_.ipAddress)((c_, f_) => c_.copy(ipAddress = f_))
      def port: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Int] = field(_.port)((c_, f_) => c_.copy(port = f_))
    }
    final val IP_ADDRESS_FIELD_NUMBER = 1
    final val PORT_FIELD_NUMBER = 2
    def of(
      ipAddress: _root_.com.google.protobuf.ByteString,
      port: _root_.scala.Int
    ): _root_.io.grpc.channelz.v1.Address.TcpIpAddress = _root_.io.grpc.channelz.v1.Address.TcpIpAddress(
      ipAddress,
      port
    )
  }
  
  /** A Unix Domain Socket address.
    */
  @SerialVersionUID(0L)
  final case class UdsAddress(
      filename: _root_.scala.Predef.String = ""
      ) extends scalapb.GeneratedMessage with scalapb.Message[UdsAddress] with scalapb.lenses.Updatable[UdsAddress] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = filename
          if (__value != "") {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = filename
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.grpc.channelz.v1.Address.UdsAddress = {
        var __filename = this.filename
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __filename = _input__.readString()
            case tag => _input__.skipField(tag)
          }
        }
        io.grpc.channelz.v1.Address.UdsAddress(
            filename = __filename
        )
      }
      def withFilename(__v: _root_.scala.Predef.String): UdsAddress = copy(filename = __v)
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = filename
            if (__t != "") __t else null
          }
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(filename)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = io.grpc.channelz.v1.Address.UdsAddress
  }
  
  object UdsAddress extends scalapb.GeneratedMessageCompanion[io.grpc.channelz.v1.Address.UdsAddress] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.grpc.channelz.v1.Address.UdsAddress] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.grpc.channelz.v1.Address.UdsAddress = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      io.grpc.channelz.v1.Address.UdsAddress(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.grpc.channelz.v1.Address.UdsAddress] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        io.grpc.channelz.v1.Address.UdsAddress(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.grpc.channelz.v1.Address.javaDescriptor.getNestedTypes.get(1)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.grpc.channelz.v1.Address.scalaDescriptor.nestedMessages(1)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.grpc.channelz.v1.Address.UdsAddress(
      filename = ""
    )
    implicit class UdsAddressLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.Address.UdsAddress]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.grpc.channelz.v1.Address.UdsAddress](_l) {
      def filename: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.filename)((c_, f_) => c_.copy(filename = f_))
    }
    final val FILENAME_FIELD_NUMBER = 1
    def of(
      filename: _root_.scala.Predef.String
    ): _root_.io.grpc.channelz.v1.Address.UdsAddress = _root_.io.grpc.channelz.v1.Address.UdsAddress(
      filename
    )
  }
  
  /** An address type not included above.
    *
    * @param name
    *   The human readable version of the value.  This value should be set.
    * @param value
    *   The actual address message.
    */
  @SerialVersionUID(0L)
  final case class OtherAddress(
      name: _root_.scala.Predef.String = "",
      value: _root_.scala.Option[com.google.protobuf.any.Any] = _root_.scala.None
      ) extends scalapb.GeneratedMessage with scalapb.Message[OtherAddress] with scalapb.lenses.Updatable[OtherAddress] {
      @transient
      private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
      private[this] def __computeSerializedValue(): _root_.scala.Int = {
        var __size = 0
        
        {
          val __value = name
          if (__value != "") {
            __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
          }
        };
        if (value.isDefined) {
          val __value = value.get
          __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
        };
        __size
      }
      final override def serializedSize: _root_.scala.Int = {
        var read = __serializedSizeCachedValue
        if (read == 0) {
          read = __computeSerializedValue()
          __serializedSizeCachedValue = read
        }
        read
      }
      def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
        {
          val __v = name
          if (__v != "") {
            _output__.writeString(1, __v)
          }
        };
        value.foreach { __v =>
          val __m = __v
          _output__.writeTag(2, 2)
          _output__.writeUInt32NoTag(__m.serializedSize)
          __m.writeTo(_output__)
        };
      }
      def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.grpc.channelz.v1.Address.OtherAddress = {
        var __name = this.name
        var __value = this.value
        var _done__ = false
        while (!_done__) {
          val _tag__ = _input__.readTag()
          _tag__ match {
            case 0 => _done__ = true
            case 10 =>
              __name = _input__.readString()
            case 18 =>
              __value = Option(_root_.scalapb.LiteParser.readMessage(_input__, __value.getOrElse(com.google.protobuf.any.Any.defaultInstance)))
            case tag => _input__.skipField(tag)
          }
        }
        io.grpc.channelz.v1.Address.OtherAddress(
            name = __name,
            value = __value
        )
      }
      def withName(__v: _root_.scala.Predef.String): OtherAddress = copy(name = __v)
      def getValue: com.google.protobuf.any.Any = value.getOrElse(com.google.protobuf.any.Any.defaultInstance)
      def clearValue: OtherAddress = copy(value = _root_.scala.None)
      def withValue(__v: com.google.protobuf.any.Any): OtherAddress = copy(value = Option(__v))
      def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
        (__fieldNumber: @_root_.scala.unchecked) match {
          case 1 => {
            val __t = name
            if (__t != "") __t else null
          }
          case 2 => value.orNull
        }
      }
      def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
        _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
        (__field.number: @_root_.scala.unchecked) match {
          case 1 => _root_.scalapb.descriptors.PString(name)
          case 2 => value.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        }
      }
      def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
      def companion = io.grpc.channelz.v1.Address.OtherAddress
  }
  
  object OtherAddress extends scalapb.GeneratedMessageCompanion[io.grpc.channelz.v1.Address.OtherAddress] {
    implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.grpc.channelz.v1.Address.OtherAddress] = this
    def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.grpc.channelz.v1.Address.OtherAddress = {
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
      val __fields = javaDescriptor.getFields
      io.grpc.channelz.v1.Address.OtherAddress(
        __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
        __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[com.google.protobuf.any.Any]]
      )
    }
    implicit def messageReads: _root_.scalapb.descriptors.Reads[io.grpc.channelz.v1.Address.OtherAddress] = _root_.scalapb.descriptors.Reads{
      case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
        _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
        io.grpc.channelz.v1.Address.OtherAddress(
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
          __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.any.Any]])
        )
      case _ => throw new RuntimeException("Expected PMessage")
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = io.grpc.channelz.v1.Address.javaDescriptor.getNestedTypes.get(2)
    def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = io.grpc.channelz.v1.Address.scalaDescriptor.nestedMessages(2)
    def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
      var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
      (__number: @_root_.scala.unchecked) match {
        case 2 => __out = com.google.protobuf.any.Any
      }
      __out
    }
    lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
    def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
    lazy val defaultInstance = io.grpc.channelz.v1.Address.OtherAddress(
      name = "",
      value = _root_.scala.None
    )
    implicit class OtherAddressLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.Address.OtherAddress]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.grpc.channelz.v1.Address.OtherAddress](_l) {
      def name: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.name)((c_, f_) => c_.copy(name = f_))
      def value: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.any.Any] = field(_.getValue)((c_, f_) => c_.copy(value = Option(f_)))
      def optionalValue: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.any.Any]] = field(_.value)((c_, f_) => c_.copy(value = f_))
    }
    final val NAME_FIELD_NUMBER = 1
    final val VALUE_FIELD_NUMBER = 2
    def of(
      name: _root_.scala.Predef.String,
      value: _root_.scala.Option[com.google.protobuf.any.Any]
    ): _root_.io.grpc.channelz.v1.Address.OtherAddress = _root_.io.grpc.channelz.v1.Address.OtherAddress(
      name,
      value
    )
  }
  
  implicit class AddressLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.Address]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.grpc.channelz.v1.Address](_l) {
    def tcpipAddress: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.Address.TcpIpAddress] = field(_.getTcpipAddress)((c_, f_) => c_.copy(address = io.grpc.channelz.v1.Address.Address.TcpipAddress(f_)))
    def udsAddress: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.Address.UdsAddress] = field(_.getUdsAddress)((c_, f_) => c_.copy(address = io.grpc.channelz.v1.Address.Address.UdsAddress(f_)))
    def otherAddress: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.Address.OtherAddress] = field(_.getOtherAddress)((c_, f_) => c_.copy(address = io.grpc.channelz.v1.Address.Address.OtherAddress(f_)))
    def address: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.Address.Address] = field(_.address)((c_, f_) => c_.copy(address = f_))
  }
  final val TCPIP_ADDRESS_FIELD_NUMBER = 1
  final val UDS_ADDRESS_FIELD_NUMBER = 2
  final val OTHER_ADDRESS_FIELD_NUMBER = 3
  def of(
    address: io.grpc.channelz.v1.Address.Address
  ): _root_.io.grpc.channelz.v1.Address = _root_.io.grpc.channelz.v1.Address(
    address
  )
}
