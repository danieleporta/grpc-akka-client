// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.grpc.channelz.v1

/** Information about an actual connection.  Pronounced "sock-ay".
  *
  * @param ref
  *   The identifier for the Socket.
  * @param data
  *   Data specific to this Socket.
  * @param local
  *   The locally bound address.
  * @param remote
  *   The remote bound address.  May be absent.
  * @param security
  *   Security details for this socket.  May be absent if not available, or
  *   there is no security on the socket.
  * @param remoteName
  *   Optional, represents the name of the remote endpoint, if different than
  *   the original target name.
  */
@SerialVersionUID(0L)
final case class Socket(
    ref: _root_.scala.Option[io.grpc.channelz.v1.SocketRef] = _root_.scala.None,
    data: _root_.scala.Option[io.grpc.channelz.v1.SocketData] = _root_.scala.None,
    local: _root_.scala.Option[io.grpc.channelz.v1.Address] = _root_.scala.None,
    remote: _root_.scala.Option[io.grpc.channelz.v1.Address] = _root_.scala.None,
    security: _root_.scala.Option[io.grpc.channelz.v1.Security] = _root_.scala.None,
    remoteName: _root_.scala.Predef.String = ""
    ) extends scalapb.GeneratedMessage with scalapb.Message[Socket] with scalapb.lenses.Updatable[Socket] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ref.isDefined) {
        val __value = ref.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.isDefined) {
        val __value = data.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (local.isDefined) {
        val __value = local.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (remote.isDefined) {
        val __value = remote.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (security.isDefined) {
        val __value = security.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      
      {
        val __value = remoteName
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(6, __value)
        }
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ref.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      local.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      remote.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      security.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      {
        val __v = remoteName
        if (__v != "") {
          _output__.writeString(6, __v)
        }
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.grpc.channelz.v1.Socket = {
      var __ref = this.ref
      var __data = this.data
      var __local = this.local
      var __remote = this.remote
      var __security = this.security
      var __remoteName = this.remoteName
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ref = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ref.getOrElse(io.grpc.channelz.v1.SocketRef.defaultInstance)))
          case 18 =>
            __data = Option(_root_.scalapb.LiteParser.readMessage(_input__, __data.getOrElse(io.grpc.channelz.v1.SocketData.defaultInstance)))
          case 26 =>
            __local = Option(_root_.scalapb.LiteParser.readMessage(_input__, __local.getOrElse(io.grpc.channelz.v1.Address.defaultInstance)))
          case 34 =>
            __remote = Option(_root_.scalapb.LiteParser.readMessage(_input__, __remote.getOrElse(io.grpc.channelz.v1.Address.defaultInstance)))
          case 42 =>
            __security = Option(_root_.scalapb.LiteParser.readMessage(_input__, __security.getOrElse(io.grpc.channelz.v1.Security.defaultInstance)))
          case 50 =>
            __remoteName = _input__.readString()
          case tag => _input__.skipField(tag)
        }
      }
      io.grpc.channelz.v1.Socket(
          ref = __ref,
          data = __data,
          local = __local,
          remote = __remote,
          security = __security,
          remoteName = __remoteName
      )
    }
    def getRef: io.grpc.channelz.v1.SocketRef = ref.getOrElse(io.grpc.channelz.v1.SocketRef.defaultInstance)
    def clearRef: Socket = copy(ref = _root_.scala.None)
    def withRef(__v: io.grpc.channelz.v1.SocketRef): Socket = copy(ref = Option(__v))
    def getData: io.grpc.channelz.v1.SocketData = data.getOrElse(io.grpc.channelz.v1.SocketData.defaultInstance)
    def clearData: Socket = copy(data = _root_.scala.None)
    def withData(__v: io.grpc.channelz.v1.SocketData): Socket = copy(data = Option(__v))
    def getLocal: io.grpc.channelz.v1.Address = local.getOrElse(io.grpc.channelz.v1.Address.defaultInstance)
    def clearLocal: Socket = copy(local = _root_.scala.None)
    def withLocal(__v: io.grpc.channelz.v1.Address): Socket = copy(local = Option(__v))
    def getRemote: io.grpc.channelz.v1.Address = remote.getOrElse(io.grpc.channelz.v1.Address.defaultInstance)
    def clearRemote: Socket = copy(remote = _root_.scala.None)
    def withRemote(__v: io.grpc.channelz.v1.Address): Socket = copy(remote = Option(__v))
    def getSecurity: io.grpc.channelz.v1.Security = security.getOrElse(io.grpc.channelz.v1.Security.defaultInstance)
    def clearSecurity: Socket = copy(security = _root_.scala.None)
    def withSecurity(__v: io.grpc.channelz.v1.Security): Socket = copy(security = Option(__v))
    def withRemoteName(__v: _root_.scala.Predef.String): Socket = copy(remoteName = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ref.orNull
        case 2 => data.orNull
        case 3 => local.orNull
        case 4 => remote.orNull
        case 5 => security.orNull
        case 6 => {
          val __t = remoteName
          if (__t != "") __t else null
        }
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ref.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => data.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => local.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => remote.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => security.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 6 => _root_.scalapb.descriptors.PString(remoteName)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.grpc.channelz.v1.Socket
}

object Socket extends scalapb.GeneratedMessageCompanion[io.grpc.channelz.v1.Socket] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.grpc.channelz.v1.Socket] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.grpc.channelz.v1.Socket = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    io.grpc.channelz.v1.Socket(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[io.grpc.channelz.v1.SocketRef]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[io.grpc.channelz.v1.SocketData]],
      __fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[io.grpc.channelz.v1.Address]],
      __fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[io.grpc.channelz.v1.Address]],
      __fieldsMap.get(__fields.get(4)).asInstanceOf[_root_.scala.Option[io.grpc.channelz.v1.Security]],
      __fieldsMap.getOrElse(__fields.get(5), "").asInstanceOf[_root_.scala.Predef.String]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.grpc.channelz.v1.Socket] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      io.grpc.channelz.v1.Socket(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.grpc.channelz.v1.SocketRef]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.grpc.channelz.v1.SocketData]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[io.grpc.channelz.v1.Address]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.grpc.channelz.v1.Address]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[io.grpc.channelz.v1.Security]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(6).get).map(_.as[_root_.scala.Predef.String]).getOrElse("")
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ChannelzProto.javaDescriptor.getMessageTypes.get(12)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ChannelzProto.scalaDescriptor.messages(12)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.grpc.channelz.v1.SocketRef
      case 2 => __out = io.grpc.channelz.v1.SocketData
      case 3 => __out = io.grpc.channelz.v1.Address
      case 4 => __out = io.grpc.channelz.v1.Address
      case 5 => __out = io.grpc.channelz.v1.Security
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.grpc.channelz.v1.Socket(
    ref = _root_.scala.None,
    data = _root_.scala.None,
    local = _root_.scala.None,
    remote = _root_.scala.None,
    security = _root_.scala.None,
    remoteName = ""
  )
  implicit class SocketLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.Socket]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.grpc.channelz.v1.Socket](_l) {
    def ref: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.SocketRef] = field(_.getRef)((c_, f_) => c_.copy(ref = Option(f_)))
    def optionalRef: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.grpc.channelz.v1.SocketRef]] = field(_.ref)((c_, f_) => c_.copy(ref = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.SocketData] = field(_.getData)((c_, f_) => c_.copy(data = Option(f_)))
    def optionalData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.grpc.channelz.v1.SocketData]] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def local: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.Address] = field(_.getLocal)((c_, f_) => c_.copy(local = Option(f_)))
    def optionalLocal: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.grpc.channelz.v1.Address]] = field(_.local)((c_, f_) => c_.copy(local = f_))
    def remote: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.Address] = field(_.getRemote)((c_, f_) => c_.copy(remote = Option(f_)))
    def optionalRemote: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.grpc.channelz.v1.Address]] = field(_.remote)((c_, f_) => c_.copy(remote = f_))
    def security: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.Security] = field(_.getSecurity)((c_, f_) => c_.copy(security = Option(f_)))
    def optionalSecurity: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.grpc.channelz.v1.Security]] = field(_.security)((c_, f_) => c_.copy(security = f_))
    def remoteName: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.remoteName)((c_, f_) => c_.copy(remoteName = f_))
  }
  final val REF_FIELD_NUMBER = 1
  final val DATA_FIELD_NUMBER = 2
  final val LOCAL_FIELD_NUMBER = 3
  final val REMOTE_FIELD_NUMBER = 4
  final val SECURITY_FIELD_NUMBER = 5
  final val REMOTE_NAME_FIELD_NUMBER = 6
  def of(
    ref: _root_.scala.Option[io.grpc.channelz.v1.SocketRef],
    data: _root_.scala.Option[io.grpc.channelz.v1.SocketData],
    local: _root_.scala.Option[io.grpc.channelz.v1.Address],
    remote: _root_.scala.Option[io.grpc.channelz.v1.Address],
    security: _root_.scala.Option[io.grpc.channelz.v1.Security],
    remoteName: _root_.scala.Predef.String
  ): _root_.io.grpc.channelz.v1.Socket = _root_.io.grpc.channelz.v1.Socket(
    ref,
    data,
    local,
    remote,
    security,
    remoteName
  )
}
