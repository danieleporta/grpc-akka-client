// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.grpc.channelz.v1

/** A trace event is an interesting thing that happened to a channel or
  * subchannel, such as creation, address resolution, subchannel creation, etc.
  *
  * @param description
  *   High level description of the event.
  * @param severity
  *   the severity of the trace event
  * @param timestamp
  *   When this event occurred.
  */
@SerialVersionUID(0L)
final case class ChannelTraceEvent(
    description: _root_.scala.Predef.String = "",
    severity: io.grpc.channelz.v1.ChannelTraceEvent.Severity = io.grpc.channelz.v1.ChannelTraceEvent.Severity.CT_UNKNOWN,
    timestamp: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp] = _root_.scala.None,
    childRef: io.grpc.channelz.v1.ChannelTraceEvent.ChildRef = io.grpc.channelz.v1.ChannelTraceEvent.ChildRef.Empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ChannelTraceEvent] with scalapb.lenses.Updatable[ChannelTraceEvent] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      
      {
        val __value = description
        if (__value != "") {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeStringSize(1, __value)
        }
      };
      
      {
        val __value = severity
        if (__value != io.grpc.channelz.v1.ChannelTraceEvent.Severity.CT_UNKNOWN) {
          __size += _root_.com.google.protobuf.CodedOutputStream.computeEnumSize(2, __value.value)
        }
      };
      if (timestamp.isDefined) {
        val __value = timestamp.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (childRef.channelRef.isDefined) {
        val __value = childRef.channelRef.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (childRef.subchannelRef.isDefined) {
        val __value = childRef.subchannelRef.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      {
        val __v = description
        if (__v != "") {
          _output__.writeString(1, __v)
        }
      };
      {
        val __v = severity
        if (__v != io.grpc.channelz.v1.ChannelTraceEvent.Severity.CT_UNKNOWN) {
          _output__.writeEnum(2, __v.value)
        }
      };
      timestamp.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      childRef.channelRef.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      childRef.subchannelRef.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.grpc.channelz.v1.ChannelTraceEvent = {
      var __description = this.description
      var __severity = this.severity
      var __timestamp = this.timestamp
      var __childRef = this.childRef
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __description = _input__.readString()
          case 16 =>
            __severity = io.grpc.channelz.v1.ChannelTraceEvent.Severity.fromValue(_input__.readEnum())
          case 26 =>
            __timestamp = Option(_root_.scalapb.LiteParser.readMessage(_input__, __timestamp.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)))
          case 34 =>
            __childRef = io.grpc.channelz.v1.ChannelTraceEvent.ChildRef.ChannelRef(_root_.scalapb.LiteParser.readMessage(_input__, childRef.channelRef.getOrElse(io.grpc.channelz.v1.ChannelRef.defaultInstance)))
          case 42 =>
            __childRef = io.grpc.channelz.v1.ChannelTraceEvent.ChildRef.SubchannelRef(_root_.scalapb.LiteParser.readMessage(_input__, childRef.subchannelRef.getOrElse(io.grpc.channelz.v1.SubchannelRef.defaultInstance)))
          case tag => _input__.skipField(tag)
        }
      }
      io.grpc.channelz.v1.ChannelTraceEvent(
          description = __description,
          severity = __severity,
          timestamp = __timestamp,
          childRef = __childRef
      )
    }
    def withDescription(__v: _root_.scala.Predef.String): ChannelTraceEvent = copy(description = __v)
    def withSeverity(__v: io.grpc.channelz.v1.ChannelTraceEvent.Severity): ChannelTraceEvent = copy(severity = __v)
    def getTimestamp: com.google.protobuf.timestamp.Timestamp = timestamp.getOrElse(com.google.protobuf.timestamp.Timestamp.defaultInstance)
    def clearTimestamp: ChannelTraceEvent = copy(timestamp = _root_.scala.None)
    def withTimestamp(__v: com.google.protobuf.timestamp.Timestamp): ChannelTraceEvent = copy(timestamp = Option(__v))
    def getChannelRef: io.grpc.channelz.v1.ChannelRef = childRef.channelRef.getOrElse(io.grpc.channelz.v1.ChannelRef.defaultInstance)
    def withChannelRef(__v: io.grpc.channelz.v1.ChannelRef): ChannelTraceEvent = copy(childRef = io.grpc.channelz.v1.ChannelTraceEvent.ChildRef.ChannelRef(__v))
    def getSubchannelRef: io.grpc.channelz.v1.SubchannelRef = childRef.subchannelRef.getOrElse(io.grpc.channelz.v1.SubchannelRef.defaultInstance)
    def withSubchannelRef(__v: io.grpc.channelz.v1.SubchannelRef): ChannelTraceEvent = copy(childRef = io.grpc.channelz.v1.ChannelTraceEvent.ChildRef.SubchannelRef(__v))
    def clearChildRef: ChannelTraceEvent = copy(childRef = io.grpc.channelz.v1.ChannelTraceEvent.ChildRef.Empty)
    def withChildRef(__v: io.grpc.channelz.v1.ChannelTraceEvent.ChildRef): ChannelTraceEvent = copy(childRef = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => {
          val __t = description
          if (__t != "") __t else null
        }
        case 2 => {
          val __t = severity.javaValueDescriptor
          if (__t.getNumber() != 0) __t else null
        }
        case 3 => timestamp.orNull
        case 4 => childRef.channelRef.orNull
        case 5 => childRef.subchannelRef.orNull
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PString(description)
        case 2 => _root_.scalapb.descriptors.PEnum(severity.scalaValueDescriptor)
        case 3 => timestamp.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 4 => childRef.channelRef.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 5 => childRef.subchannelRef.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.grpc.channelz.v1.ChannelTraceEvent
}

object ChannelTraceEvent extends scalapb.GeneratedMessageCompanion[io.grpc.channelz.v1.ChannelTraceEvent] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.grpc.channelz.v1.ChannelTraceEvent] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.grpc.channelz.v1.ChannelTraceEvent = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    io.grpc.channelz.v1.ChannelTraceEvent(
      __fieldsMap.getOrElse(__fields.get(0), "").asInstanceOf[_root_.scala.Predef.String],
      io.grpc.channelz.v1.ChannelTraceEvent.Severity.fromValue(__fieldsMap.getOrElse(__fields.get(1), io.grpc.channelz.v1.ChannelTraceEvent.Severity.CT_UNKNOWN.javaValueDescriptor).asInstanceOf[_root_.com.google.protobuf.Descriptors.EnumValueDescriptor].getNumber),
      __fieldsMap.get(__fields.get(2)).asInstanceOf[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]],
      childRef = __fieldsMap.get(__fields.get(3)).asInstanceOf[_root_.scala.Option[io.grpc.channelz.v1.ChannelRef]].map(io.grpc.channelz.v1.ChannelTraceEvent.ChildRef.ChannelRef)
    .orElse[io.grpc.channelz.v1.ChannelTraceEvent.ChildRef](__fieldsMap.get(__fields.get(4)).asInstanceOf[_root_.scala.Option[io.grpc.channelz.v1.SubchannelRef]].map(io.grpc.channelz.v1.ChannelTraceEvent.ChildRef.SubchannelRef))
    .getOrElse(io.grpc.channelz.v1.ChannelTraceEvent.ChildRef.Empty)
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.grpc.channelz.v1.ChannelTraceEvent] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      io.grpc.channelz.v1.ChannelTraceEvent(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.Predef.String]).getOrElse(""),
        io.grpc.channelz.v1.ChannelTraceEvent.Severity.fromValue(__fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).map(_.as[_root_.scalapb.descriptors.EnumValueDescriptor]).getOrElse(io.grpc.channelz.v1.ChannelTraceEvent.Severity.CT_UNKNOWN.scalaValueDescriptor).number),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).flatMap(_.as[_root_.scala.Option[com.google.protobuf.timestamp.Timestamp]]),
        childRef = __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).flatMap(_.as[_root_.scala.Option[io.grpc.channelz.v1.ChannelRef]]).map(io.grpc.channelz.v1.ChannelTraceEvent.ChildRef.ChannelRef)
    .orElse[io.grpc.channelz.v1.ChannelTraceEvent.ChildRef](__fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).flatMap(_.as[_root_.scala.Option[io.grpc.channelz.v1.SubchannelRef]]).map(io.grpc.channelz.v1.ChannelTraceEvent.ChildRef.SubchannelRef))
    .getOrElse(io.grpc.channelz.v1.ChannelTraceEvent.ChildRef.Empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ChannelzProto.javaDescriptor.getMessageTypes.get(4)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ChannelzProto.scalaDescriptor.messages(4)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 3 => __out = com.google.protobuf.timestamp.Timestamp
      case 4 => __out = io.grpc.channelz.v1.ChannelRef
      case 5 => __out = io.grpc.channelz.v1.SubchannelRef
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = {
    (__fieldNumber: @_root_.scala.unchecked) match {
      case 2 => io.grpc.channelz.v1.ChannelTraceEvent.Severity
    }
  }
  lazy val defaultInstance = io.grpc.channelz.v1.ChannelTraceEvent(
    description = "",
    severity = io.grpc.channelz.v1.ChannelTraceEvent.Severity.CT_UNKNOWN,
    timestamp = _root_.scala.None,
    childRef = io.grpc.channelz.v1.ChannelTraceEvent.ChildRef.Empty
  )
  /** The supported severity levels of trace events.
    */
  sealed trait Severity extends _root_.scalapb.GeneratedEnum {
    type EnumType = Severity
    def isCtUnknown: _root_.scala.Boolean = false
    def isCtInfo: _root_.scala.Boolean = false
    def isCtWarning: _root_.scala.Boolean = false
    def isCtError: _root_.scala.Boolean = false
    def companion: _root_.scalapb.GeneratedEnumCompanion[Severity] = io.grpc.channelz.v1.ChannelTraceEvent.Severity
  }
  
  object Severity extends _root_.scalapb.GeneratedEnumCompanion[Severity] {
    implicit def enumCompanion: _root_.scalapb.GeneratedEnumCompanion[Severity] = this
    @SerialVersionUID(0L)
    case object CT_UNKNOWN extends Severity {
      val value = 0
      val index = 0
      val name = "CT_UNKNOWN"
      override def isCtUnknown: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object CT_INFO extends Severity {
      val value = 1
      val index = 1
      val name = "CT_INFO"
      override def isCtInfo: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object CT_WARNING extends Severity {
      val value = 2
      val index = 2
      val name = "CT_WARNING"
      override def isCtWarning: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object CT_ERROR extends Severity {
      val value = 3
      val index = 3
      val name = "CT_ERROR"
      override def isCtError: _root_.scala.Boolean = true
    }
    
    @SerialVersionUID(0L)
    final case class Unrecognized(value: _root_.scala.Int) extends Severity with _root_.scalapb.UnrecognizedEnum
    
    lazy val values = scala.collection.immutable.Seq(CT_UNKNOWN, CT_INFO, CT_WARNING, CT_ERROR)
    def fromValue(value: _root_.scala.Int): Severity = value match {
      case 0 => CT_UNKNOWN
      case 1 => CT_INFO
      case 2 => CT_WARNING
      case 3 => CT_ERROR
      case __other => Unrecognized(__other)
    }
    def javaDescriptor: _root_.com.google.protobuf.Descriptors.EnumDescriptor = io.grpc.channelz.v1.ChannelTraceEvent.javaDescriptor.getEnumTypes.get(0)
    def scalaDescriptor: _root_.scalapb.descriptors.EnumDescriptor = io.grpc.channelz.v1.ChannelTraceEvent.scalaDescriptor.enums(0)
  }
  sealed trait ChildRef extends _root_.scalapb.GeneratedOneof {
    def isEmpty: _root_.scala.Boolean = false
    def isDefined: _root_.scala.Boolean = true
    def isChannelRef: _root_.scala.Boolean = false
    def isSubchannelRef: _root_.scala.Boolean = false
    def channelRef: _root_.scala.Option[io.grpc.channelz.v1.ChannelRef] = _root_.scala.None
    def subchannelRef: _root_.scala.Option[io.grpc.channelz.v1.SubchannelRef] = _root_.scala.None
  }
  object ChildRef extends {
    @SerialVersionUID(0L)
    case object Empty extends io.grpc.channelz.v1.ChannelTraceEvent.ChildRef {
      type ValueType = _root_.scala.Nothing
      override def isEmpty: _root_.scala.Boolean = true
      override def isDefined: _root_.scala.Boolean = false
      override def number: _root_.scala.Int = 0
      override def value: _root_.scala.Nothing = throw new java.util.NoSuchElementException("Empty.value")
    }
  
    @SerialVersionUID(0L)
    final case class ChannelRef(value: io.grpc.channelz.v1.ChannelRef) extends io.grpc.channelz.v1.ChannelTraceEvent.ChildRef {
      type ValueType = io.grpc.channelz.v1.ChannelRef
      override def isChannelRef: _root_.scala.Boolean = true
      override def channelRef: _root_.scala.Option[io.grpc.channelz.v1.ChannelRef] = Some(value)
      override def number: _root_.scala.Int = 4
    }
    @SerialVersionUID(0L)
    final case class SubchannelRef(value: io.grpc.channelz.v1.SubchannelRef) extends io.grpc.channelz.v1.ChannelTraceEvent.ChildRef {
      type ValueType = io.grpc.channelz.v1.SubchannelRef
      override def isSubchannelRef: _root_.scala.Boolean = true
      override def subchannelRef: _root_.scala.Option[io.grpc.channelz.v1.SubchannelRef] = Some(value)
      override def number: _root_.scala.Int = 5
    }
  }
  implicit class ChannelTraceEventLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.ChannelTraceEvent]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.grpc.channelz.v1.ChannelTraceEvent](_l) {
    def description: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Predef.String] = field(_.description)((c_, f_) => c_.copy(description = f_))
    def severity: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.ChannelTraceEvent.Severity] = field(_.severity)((c_, f_) => c_.copy(severity = f_))
    def timestamp: _root_.scalapb.lenses.Lens[UpperPB, com.google.protobuf.timestamp.Timestamp] = field(_.getTimestamp)((c_, f_) => c_.copy(timestamp = Option(f_)))
    def optionalTimestamp: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[com.google.protobuf.timestamp.Timestamp]] = field(_.timestamp)((c_, f_) => c_.copy(timestamp = f_))
    def channelRef: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.ChannelRef] = field(_.getChannelRef)((c_, f_) => c_.copy(childRef = io.grpc.channelz.v1.ChannelTraceEvent.ChildRef.ChannelRef(f_)))
    def subchannelRef: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.SubchannelRef] = field(_.getSubchannelRef)((c_, f_) => c_.copy(childRef = io.grpc.channelz.v1.ChannelTraceEvent.ChildRef.SubchannelRef(f_)))
    def childRef: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.ChannelTraceEvent.ChildRef] = field(_.childRef)((c_, f_) => c_.copy(childRef = f_))
  }
  final val DESCRIPTION_FIELD_NUMBER = 1
  final val SEVERITY_FIELD_NUMBER = 2
  final val TIMESTAMP_FIELD_NUMBER = 3
  final val CHANNEL_REF_FIELD_NUMBER = 4
  final val SUBCHANNEL_REF_FIELD_NUMBER = 5
  def of(
    description: _root_.scala.Predef.String,
    severity: io.grpc.channelz.v1.ChannelTraceEvent.Severity,
    timestamp: _root_.scala.Option[com.google.protobuf.timestamp.Timestamp],
    childRef: io.grpc.channelz.v1.ChannelTraceEvent.ChildRef
  ): _root_.io.grpc.channelz.v1.ChannelTraceEvent = _root_.io.grpc.channelz.v1.ChannelTraceEvent(
    description,
    severity,
    timestamp,
    childRef
  )
}
