// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package io.grpc.channelz.v1

/** Channel is a logical grouping of channels, subchannels, and sockets.
  *
  * @param ref
  *   The identifier for this channel. This should bet set.
  * @param data
  *   Data specific to this channel.
  *   At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
  * @param channelRef
  *   There are no ordering guarantees on the order of channel refs.
  *   There may not be cycles in the ref graph.
  *   A channel ref may be present in more than one channel or subchannel.
  * @param subchannelRef
  *   At most one of 'channel_ref+subchannel_ref' and 'socket' is set.
  *   There are no ordering guarantees on the order of subchannel refs.
  *   There may not be cycles in the ref graph.
  *   A sub channel ref may be present in more than one channel or subchannel.
  * @param socketRef
  *   There are no ordering guarantees on the order of sockets.
  */
@SerialVersionUID(0L)
final case class Channel(
    ref: _root_.scala.Option[io.grpc.channelz.v1.ChannelRef] = _root_.scala.None,
    data: _root_.scala.Option[io.grpc.channelz.v1.ChannelData] = _root_.scala.None,
    channelRef: _root_.scala.Seq[io.grpc.channelz.v1.ChannelRef] = _root_.scala.Seq.empty,
    subchannelRef: _root_.scala.Seq[io.grpc.channelz.v1.SubchannelRef] = _root_.scala.Seq.empty,
    socketRef: _root_.scala.Seq[io.grpc.channelz.v1.SocketRef] = _root_.scala.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[Channel] with scalapb.lenses.Updatable[Channel] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if (ref.isDefined) {
        val __value = ref.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      if (data.isDefined) {
        val __value = data.get
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      };
      channelRef.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      subchannelRef.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      socketRef.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      ref.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      data.foreach { __v =>
        val __m = __v
        _output__.writeTag(2, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      channelRef.foreach { __v =>
        val __m = __v
        _output__.writeTag(3, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      subchannelRef.foreach { __v =>
        val __m = __v
        _output__.writeTag(4, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
      socketRef.foreach { __v =>
        val __m = __v
        _output__.writeTag(5, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): io.grpc.channelz.v1.Channel = {
      var __ref = this.ref
      var __data = this.data
      val __channelRef = (_root_.scala.collection.immutable.Vector.newBuilder[io.grpc.channelz.v1.ChannelRef] ++= this.channelRef)
      val __subchannelRef = (_root_.scala.collection.immutable.Vector.newBuilder[io.grpc.channelz.v1.SubchannelRef] ++= this.subchannelRef)
      val __socketRef = (_root_.scala.collection.immutable.Vector.newBuilder[io.grpc.channelz.v1.SocketRef] ++= this.socketRef)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __ref = Option(_root_.scalapb.LiteParser.readMessage(_input__, __ref.getOrElse(io.grpc.channelz.v1.ChannelRef.defaultInstance)))
          case 18 =>
            __data = Option(_root_.scalapb.LiteParser.readMessage(_input__, __data.getOrElse(io.grpc.channelz.v1.ChannelData.defaultInstance)))
          case 26 =>
            __channelRef += _root_.scalapb.LiteParser.readMessage(_input__, io.grpc.channelz.v1.ChannelRef.defaultInstance)
          case 34 =>
            __subchannelRef += _root_.scalapb.LiteParser.readMessage(_input__, io.grpc.channelz.v1.SubchannelRef.defaultInstance)
          case 42 =>
            __socketRef += _root_.scalapb.LiteParser.readMessage(_input__, io.grpc.channelz.v1.SocketRef.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      io.grpc.channelz.v1.Channel(
          ref = __ref,
          data = __data,
          channelRef = __channelRef.result(),
          subchannelRef = __subchannelRef.result(),
          socketRef = __socketRef.result()
      )
    }
    def getRef: io.grpc.channelz.v1.ChannelRef = ref.getOrElse(io.grpc.channelz.v1.ChannelRef.defaultInstance)
    def clearRef: Channel = copy(ref = _root_.scala.None)
    def withRef(__v: io.grpc.channelz.v1.ChannelRef): Channel = copy(ref = Option(__v))
    def getData: io.grpc.channelz.v1.ChannelData = data.getOrElse(io.grpc.channelz.v1.ChannelData.defaultInstance)
    def clearData: Channel = copy(data = _root_.scala.None)
    def withData(__v: io.grpc.channelz.v1.ChannelData): Channel = copy(data = Option(__v))
    def clearChannelRef = copy(channelRef = _root_.scala.Seq.empty)
    def addChannelRef(__vs: io.grpc.channelz.v1.ChannelRef*): Channel = addAllChannelRef(__vs)
    def addAllChannelRef(__vs: Iterable[io.grpc.channelz.v1.ChannelRef]): Channel = copy(channelRef = channelRef ++ __vs)
    def withChannelRef(__v: _root_.scala.Seq[io.grpc.channelz.v1.ChannelRef]): Channel = copy(channelRef = __v)
    def clearSubchannelRef = copy(subchannelRef = _root_.scala.Seq.empty)
    def addSubchannelRef(__vs: io.grpc.channelz.v1.SubchannelRef*): Channel = addAllSubchannelRef(__vs)
    def addAllSubchannelRef(__vs: Iterable[io.grpc.channelz.v1.SubchannelRef]): Channel = copy(subchannelRef = subchannelRef ++ __vs)
    def withSubchannelRef(__v: _root_.scala.Seq[io.grpc.channelz.v1.SubchannelRef]): Channel = copy(subchannelRef = __v)
    def clearSocketRef = copy(socketRef = _root_.scala.Seq.empty)
    def addSocketRef(__vs: io.grpc.channelz.v1.SocketRef*): Channel = addAllSocketRef(__vs)
    def addAllSocketRef(__vs: Iterable[io.grpc.channelz.v1.SocketRef]): Channel = copy(socketRef = socketRef ++ __vs)
    def withSocketRef(__v: _root_.scala.Seq[io.grpc.channelz.v1.SocketRef]): Channel = copy(socketRef = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => ref.orNull
        case 2 => data.orNull
        case 3 => channelRef
        case 4 => subchannelRef
        case 5 => socketRef
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => ref.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 2 => data.map(_.toPMessage).getOrElse(_root_.scalapb.descriptors.PEmpty)
        case 3 => _root_.scalapb.descriptors.PRepeated(channelRef.iterator.map(_.toPMessage).toVector)
        case 4 => _root_.scalapb.descriptors.PRepeated(subchannelRef.iterator.map(_.toPMessage).toVector)
        case 5 => _root_.scalapb.descriptors.PRepeated(socketRef.iterator.map(_.toPMessage).toVector)
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = io.grpc.channelz.v1.Channel
}

object Channel extends scalapb.GeneratedMessageCompanion[io.grpc.channelz.v1.Channel] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[io.grpc.channelz.v1.Channel] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): io.grpc.channelz.v1.Channel = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    io.grpc.channelz.v1.Channel(
      __fieldsMap.get(__fields.get(0)).asInstanceOf[_root_.scala.Option[io.grpc.channelz.v1.ChannelRef]],
      __fieldsMap.get(__fields.get(1)).asInstanceOf[_root_.scala.Option[io.grpc.channelz.v1.ChannelData]],
      __fieldsMap.getOrElse(__fields.get(2), Nil).asInstanceOf[_root_.scala.Seq[io.grpc.channelz.v1.ChannelRef]],
      __fieldsMap.getOrElse(__fields.get(3), Nil).asInstanceOf[_root_.scala.Seq[io.grpc.channelz.v1.SubchannelRef]],
      __fieldsMap.getOrElse(__fields.get(4), Nil).asInstanceOf[_root_.scala.Seq[io.grpc.channelz.v1.SocketRef]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[io.grpc.channelz.v1.Channel] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      io.grpc.channelz.v1.Channel(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).flatMap(_.as[_root_.scala.Option[io.grpc.channelz.v1.ChannelRef]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(2).get).flatMap(_.as[_root_.scala.Option[io.grpc.channelz.v1.ChannelData]]),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(3).get).map(_.as[_root_.scala.Seq[io.grpc.channelz.v1.ChannelRef]]).getOrElse(_root_.scala.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(4).get).map(_.as[_root_.scala.Seq[io.grpc.channelz.v1.SubchannelRef]]).getOrElse(_root_.scala.Seq.empty),
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(5).get).map(_.as[_root_.scala.Seq[io.grpc.channelz.v1.SocketRef]]).getOrElse(_root_.scala.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = ChannelzProto.javaDescriptor.getMessageTypes.get(0)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = ChannelzProto.scalaDescriptor.messages(0)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = io.grpc.channelz.v1.ChannelRef
      case 2 => __out = io.grpc.channelz.v1.ChannelData
      case 3 => __out = io.grpc.channelz.v1.ChannelRef
      case 4 => __out = io.grpc.channelz.v1.SubchannelRef
      case 5 => __out = io.grpc.channelz.v1.SocketRef
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_ <: _root_.scalapb.GeneratedMessage]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = io.grpc.channelz.v1.Channel(
    ref = _root_.scala.None,
    data = _root_.scala.None,
    channelRef = _root_.scala.Seq.empty,
    subchannelRef = _root_.scala.Seq.empty,
    socketRef = _root_.scala.Seq.empty
  )
  implicit class ChannelLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.Channel]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, io.grpc.channelz.v1.Channel](_l) {
    def ref: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.ChannelRef] = field(_.getRef)((c_, f_) => c_.copy(ref = Option(f_)))
    def optionalRef: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.grpc.channelz.v1.ChannelRef]] = field(_.ref)((c_, f_) => c_.copy(ref = f_))
    def data: _root_.scalapb.lenses.Lens[UpperPB, io.grpc.channelz.v1.ChannelData] = field(_.getData)((c_, f_) => c_.copy(data = Option(f_)))
    def optionalData: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Option[io.grpc.channelz.v1.ChannelData]] = field(_.data)((c_, f_) => c_.copy(data = f_))
    def channelRef: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.grpc.channelz.v1.ChannelRef]] = field(_.channelRef)((c_, f_) => c_.copy(channelRef = f_))
    def subchannelRef: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.grpc.channelz.v1.SubchannelRef]] = field(_.subchannelRef)((c_, f_) => c_.copy(subchannelRef = f_))
    def socketRef: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.Seq[io.grpc.channelz.v1.SocketRef]] = field(_.socketRef)((c_, f_) => c_.copy(socketRef = f_))
  }
  final val REF_FIELD_NUMBER = 1
  final val DATA_FIELD_NUMBER = 2
  final val CHANNEL_REF_FIELD_NUMBER = 3
  final val SUBCHANNEL_REF_FIELD_NUMBER = 4
  final val SOCKET_REF_FIELD_NUMBER = 5
  def of(
    ref: _root_.scala.Option[io.grpc.channelz.v1.ChannelRef],
    data: _root_.scala.Option[io.grpc.channelz.v1.ChannelData],
    channelRef: _root_.scala.Seq[io.grpc.channelz.v1.ChannelRef],
    subchannelRef: _root_.scala.Seq[io.grpc.channelz.v1.SubchannelRef],
    socketRef: _root_.scala.Seq[io.grpc.channelz.v1.SocketRef]
  ): _root_.io.grpc.channelz.v1.Channel = _root_.io.grpc.channelz.v1.Channel(
    ref,
    data,
    channelRef,
    subchannelRef,
    socketRef
  )
}
